<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Kamranicus</title>
		<link>https://kamranicus.com/</link>
		<description>Kamran Ayub</description>
		<copyright>2019</copyright>
		<pubDate>Sun, 28 Apr 2019 04:58:19 GMT</pubDate>
		<lastBuildDate>Sun, 28 Apr 2019 04:58:19 GMT</lastBuildDate>
		<item>
			<title>2019 Goals Quarterly Update (Q1)</title>
			<link>https://kamranicus.com/posts/2019-04-28-quarterly-1-update</link>
			<description>&lt;p&gt;This is my first time trying a quarterly update on &lt;a href="https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals"&gt;my yearly goal setting&lt;/a&gt; but I was updating that old post with progress notes and decided I should just formally document progress every quarter instead of retrofitting an older post. That way if any goals &lt;em&gt;evolve&lt;/em&gt; (which some have!) then I can look back and see that change happening. Also this &lt;em&gt;forces&lt;/em&gt; me to post at least once every 4 months which may get me into the groove of writing more generally.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2019-04-28-quarterly-1-update</guid>
			<pubDate>Sun, 28 Apr 2019 04:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This is my first time trying a quarterly update on &lt;a href="https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals"&gt;my yearly goal setting&lt;/a&gt; but I was updating that old post with progress notes and decided I should just formally document progress every quarter instead of retrofitting an older post. That way if any goals &lt;em&gt;evolve&lt;/em&gt; (which some have!) then I can look back and see that change happening. Also this &lt;em&gt;forces&lt;/em&gt; me to post at least once every 4 months which may get me into the groove of writing more generally.&lt;/p&gt;
&lt;h2 id="progress-on-yearly-goals"&gt;Progress on yearly goals&lt;/h2&gt;
&lt;p&gt;Here are the goals I originally laid out and progress notes for each! At the end I also listed some unplanned accomplishments so I can track those too.&lt;/p&gt;
&lt;h3 id="primary-goals"&gt;Primary Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⌛ Publish 1 Pluralsight course on Azure or TypeScript or React (&lt;del&gt;September&lt;/del&gt; Q4)
&lt;ul&gt;
&lt;li&gt;I have maintenance updates coming in before July but no plans for a course; targeting after summer. Adjusted the target date.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;☑️ Publish 4 Pluralsight guides on React &amp;amp; TypeScript by May
&lt;ul&gt;
&lt;li&gt;I was able to publish &lt;a href="https://kamranicus.com/guides"&gt;3 PS guides&lt;/a&gt; but didn't do a 4th because I actually got an unforeseen opportunity to &lt;a href="https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes"&gt;write a freelance article for RavenDB&lt;/a&gt;! I am marking this goal as completed with a bonus objective!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ Speak at NDC MN on a TypeScript topic
&lt;ul&gt;
&lt;li&gt;I was &lt;a href="https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript"&gt;accepted to speak&lt;/a&gt; at NDC MN in May.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Publish 5 technical articles on the blog about Azure, TypeScript, or React
&lt;ul&gt;
&lt;li&gt;I need to plan this out more specifically, though I have a couple ideas! I did post about &lt;a href="https://dev.to/kamranayub/copying-to-the-clipboard-using-react-typescript-material-ui-4fdb"&gt;Copying to clipboard using React and TypeScript&lt;/a&gt; on dev.to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;☑️ Pay off all non-mortgage debt
&lt;ul&gt;
&lt;li&gt;I've paid off all loans under my name! 🎉 Cassie is up next. Neither of us have any credit card debt or car loans, it's just the student loans left.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;☑️ Passive income should account for 2% of earnings, 1099 income for 5%
&lt;ul&gt;
&lt;li&gt;As a percentage of household W-2 income, passive income is at 1% and contracting income is at 1%, making a total of 2%. Not bad and I project passive income will be just at or higher than 2%. I am not quite as sure if contracting will end up being above 5% but I'll try!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;☑️ Replace my PCs at home with a single good Ultrabook/Notebook and a NAS
&lt;ul&gt;
&lt;li&gt;I sold my secondary PC, decided to keep my main PC but instead got a quieter case for recording. I also picked up a used Lenovo Yoga 720 laptop as my personal on-the-go machine. No NAS quite yet, though. I also discovered I have enough parts for yet another entry-level PC but something is up with the motherboard/parts and it won't turn on correctly 🤷‍♂️.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Push 3 substantive updates to KTOMG throughout the year: Steam review revamp, Raven 4 upgrade, and Linux hosting
&lt;ul&gt;
&lt;li&gt;This is my focus for the summer, after NDC. I am nearly done migrating to RavenDB 4!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;☑️ Learn how to cut trim/baseboard and finish the nursery
&lt;ul&gt;
&lt;li&gt;I finished the nursery but decided to &lt;em&gt;paint&lt;/em&gt; the trim/baseboard instead of replacing it outright, for now.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Finish my office decor/storage, maybe paint it too
&lt;ul&gt;
&lt;li&gt;I am in the process of selling my old furniture so I can create a &amp;quot;maker&amp;quot; space for me and my kids. I still would like to paint it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stretch-goals"&gt;Stretch Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⌛ Set up a quarterly newsletter
&lt;ul&gt;
&lt;li&gt;I am working on this!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Publish 1 more Pluralsight course on Azure or TypeScript or React&lt;/li&gt;
&lt;li&gt;Publish 4 additional Pluralsight guides throughout the year&lt;/li&gt;
&lt;li&gt;Participate in 1 Pluralsight Mentoring session&lt;/li&gt;
&lt;li&gt;Become a Microsoft MVP with a focus on Azure/TypeScript content&lt;/li&gt;
&lt;li&gt;⌛ Speak at a JSConf or ReactConf event
&lt;ul&gt;
&lt;li&gt;So far have not been accepted to any that I've applied to but 🤞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speak at the React MN meetup about TypeScript or GraphQL&lt;/li&gt;
&lt;li&gt;Record a YouTube video walkthrough of my &lt;a href="https://kamranicus.com/guides/raspberry-pi-3-baby-monitor"&gt;Raspberry Pi baby monitor&lt;/a&gt; written guide&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1099 income should account for 12% or more (+2% over 2018)&lt;/li&gt;
&lt;li&gt;⌛ Travel completely free somewhere in the US with wife and 2 kids using miles/points
&lt;ul&gt;
&lt;li&gt;We earned our 50K bonus miles from our Chase Sapphire Preferred card (&lt;a href="https://www.choosefi.com/all-articles/travel-rewards/"&gt;you should too!&lt;/a&gt;) but not sure if we will go anywhere using them yet or wait. I was proud of this one because we used the card to pay off my daughter's birth bills, earn the 50K bonus miles, &lt;em&gt;and&lt;/em&gt; are saving the receipts for &lt;a href="https://www.choosefi.com/use-your-hsa-to-provide-income-in-retirement/"&gt;a future tax-free HSA reimbursement&lt;/a&gt;. That was a nice hack!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Participate in Ludum Dare during the spring
&lt;ul&gt;
&lt;li&gt;This is a no-go, just didn't have the time. Perhaps in fall/winter!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.youtube.com/watch?v=OJqk2iS_jyQ"&gt;luxury vinyl plank&lt;/a&gt; in my office&lt;/li&gt;
&lt;li&gt;Replace baseboard/trim in my son's bedroom&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="unplanned-accomplishments"&gt;Unplanned Accomplishments&lt;/h2&gt;
&lt;h3 id="professional"&gt;Professional&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Freelance writing for RavenDB.&lt;/strong&gt; I was excited to have the opportunity to work with Hibernating Rhinos, creators of RavenDB, to write two articles on RavenDB. &lt;a href="(https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes)"&gt;One was published in April&lt;/a&gt;, the other will be published in May.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;I made a little app.&lt;/strong&gt; Without much fanfare, &lt;a href="https://reachfi.app/update/2019-02-19-initial-release/"&gt;I released an app&lt;/a&gt; that helps track your savings rate. I'd love to spend more time building it out but it's not a heavy focus right now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Released an OSS project.&lt;/strong&gt; I released a small &lt;a href="https://www.gatsbyjs.org/packages/gatsby-source-typedoc/?=gatsby-source-type"&gt;gatsby source plugin&lt;/a&gt; for generating TypeDoc to source in a Gatsby app for Excalibur's new docs site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="personal"&gt;Personal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Finished 3 books.&lt;/strong&gt; Through Audible and the library, I finished some books: &lt;a href="https://www.goodreads.com/book/show/30835567-hit-refresh"&gt;Hit Refresh&lt;/a&gt;, &lt;a href="https://www.goodreads.com/book/show/35068719-meet-the-frugalwoods"&gt;Meet the Frugalwoods&lt;/a&gt;, and &lt;a href="https://www.goodreads.com/book/show/19288043-gone-girl"&gt;Gone Girl&lt;/a&gt;. I am currently listening to &lt;a href="https://www.goodreads.com/book/show/40187317-mission-critical"&gt;Mission Critical, a Gray Man book&lt;/a&gt; and reading &lt;a href="https://www.goodreads.com/book/show/110312.Conceptual_Blockbusting"&gt;Conceptual Blockbusting&lt;/a&gt; along with &lt;a href="https://www.goodreads.com/book/show/4845.Code_Complete"&gt;Code Complete&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Finished over 60 episodes of ChooseFI&lt;/strong&gt;. It's &lt;a href="https://twitter.com/kamranayub/status/1082390375560593408"&gt;no secret&lt;/a&gt; I love the ChooseFI podcast (and &lt;a href="https://podcasts.apple.com/us/podcast/choosefi/id1187770032"&gt;I'm not alone&lt;/a&gt;). As of this week I'm on episode 67R which means I'm about halfway through the back catalog. &lt;strong&gt;That's about 70 hours of content!&lt;/strong&gt; It's just a fantastic source of information on all aspects of &amp;quot;life optimization&amp;quot; like finance, mindfulness, happiness, and growth. I recommend it whenever I can and if it impacts others the same way it impacted me, then I'll continue singing its praises.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-thoughts"&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;It's been a busy Q1! I owe thanks to &lt;a href="https://todoist.com"&gt;Todoist&lt;/a&gt;, that has transformed how we do things around our household between my wife and I. I've actually enjoyed writing quite a bit though now I feel the itch to come up with content for the blog.&lt;/p&gt;
&lt;p&gt;I have been thinking of what I want Kamranicus.com to be and how it should change to host my content and showcase different things but haven't landed on anything final yet. As you perhaps might notice, in the posts and guides I've enabled Adsense since there are some popular pieces of content on here and I actually earn a little from my Amazon affiliate links already.&lt;/p&gt;
&lt;p&gt;I was also very excited and thankful for the opportunity to do some freelancing as it lit a fire under me to get me working with some business products like &lt;a href="http://fbuy.me/mou3m"&gt;Quickbooks&lt;/a&gt; (use my 50% off referral link) and &lt;a href="http://dochub.com"&gt;Dochub&lt;/a&gt; to better manage my side hustling. It &lt;em&gt;also&lt;/em&gt; derailed my focus on KTOMG for the spring since March-May has just been doing writing leaving much less time to get things done for KTOMG in a timely manner. Oh well!&lt;/p&gt;
&lt;p&gt;Looking towards the summer (Q2), I'm also pretty excited for NDC MN, some course maintenance, and then re-focusing on KTOMG. This will also be our first summer that Cassie and the kids will have off together! So they will be visiting me at work more often and I'll be trying to spend time with them when I can. The grill is already out 🔥🍔&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Data Modeling with Indexes in RavenDB</title>
			<link>https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes</link>
			<description>&lt;p&gt;I recently had an opportunity to work with &lt;a href="http://ayende.com"&gt;Ayende&lt;/a&gt; from Hibernating Rhinos and creator of &lt;a href="https://ravendb.net"&gt;RavenDB&lt;/a&gt; to take some posts of his regarding data modeling with indexes and bring them to a wider audience. I enjoy working with RavenDB and as you might know, even have a &lt;a href="http://bit.ly/PSRavenDB4"&gt;Getting Started course&lt;/a&gt; on it so I was happy to work with HN to write an article on the subject.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes</guid>
			<pubDate>Thu, 04 Apr 2019 13:30:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I recently had an opportunity to work with &lt;a href="http://ayende.com"&gt;Ayende&lt;/a&gt; from Hibernating Rhinos and creator of &lt;a href="https://ravendb.net"&gt;RavenDB&lt;/a&gt; to take some posts of his regarding data modeling with indexes and bring them to a wider audience. I enjoy working with RavenDB and as you might know, even have a &lt;a href="http://bit.ly/PSRavenDB4"&gt;Getting Started course&lt;/a&gt; on it so I was happy to work with HN to write an article on the subject.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.codeproject.com/Articles/1348454/Data-Modeling-with-Indexes-in-RavenDB"&gt;Data Modeling with Indexes in RavenDB&lt;/a&gt;
went live today on CodeProject and covers how indexes work in Raven and some simple to advanced use cases to show off
their power. Be sure to check it out!&lt;/p&gt;
&lt;p&gt;I'm excited to be working with HN to bring some more articles to a wider audience so I'll be sure to share when any other articles go live.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>New Pluralsight Guide: Getting Started With React and TypeScript </title>
			<link>https://kamranicus.com/posts/2019-02-21-typescript-react-getting-started-pluralsight-guide</link>
			<description>&lt;p&gt;I just published my third Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/3Y65d"&gt;Getting Started with React and TypeScript&lt;/a&gt;. I cover a few different ways to start up a new React project with TypeScript including create-react-app, from scratch, and bundling with Webpack/Parcel.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2019-02-21-typescript-react-getting-started-pluralsight-guide</guid>
			<pubDate>Fri, 22 Feb 2019 03:16:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I just published my third Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/3Y65d"&gt;Getting Started with React and TypeScript&lt;/a&gt;. I cover a few different ways to start up a new React project with TypeScript including create-react-app, from scratch, and bundling with Webpack/Parcel.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>NDC MN 2019: Designing a Flexible UI Architecture with React and GraphQL</title>
			<link>https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript</link>
			<description>&lt;p&gt;I'm excited to &lt;a href="/posts/2018-05-11-ndc-minnesota-typescript-react"&gt;once again&lt;/a&gt; be invited to &lt;a href="https://ndcminnesota.com/talk/designing-a-flexible-ui-architecture-with-react-and-graphql/"&gt;speak at NDC Minnesota&lt;/a&gt;!&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript</guid>
			<pubDate>Sat, 02 Feb 2019 02:38:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I'm excited to &lt;a href="/posts/2018-05-11-ndc-minnesota-typescript-react"&gt;once again&lt;/a&gt; be invited to &lt;a href="https://ndcminnesota.com/talk/designing-a-flexible-ui-architecture-with-react-and-graphql/"&gt;speak at NDC Minnesota&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Here's the what I'm speaking about:&lt;/p&gt;
&lt;h3 id="designing-a-flexible-ui-architecture-with-react-and-graphql"&gt;Designing a Flexible UI Architecture with React and GraphQL&lt;/h3&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Many line-of-business apps we build today are &amp;quot;forms over data&amp;quot; applications. That data has its own backend schema and business rules, used by systems across the company. As that data flexes and scales, so do the needs of our UIs. Trying to manually track and maintain those data type changes in our UIs is time consuming and inevitably leads to bugs that cause data quality issues and results in real business impact.&lt;/p&gt;
&lt;p&gt;Instead why don't we introduce our own UI schema that abstracts the myriad backend data sources with common sets of rules and metadata shared with both the client and server? I will show you how we designed and built a modern schema-driven UI architecture with React, Redux, TypeScript, and GraphQL that could manage business complexity and still scale to meet future data requirements.&lt;/p&gt;
&lt;p&gt;I'll share some lessons learned and advice for your own applications so you can design your own data-driven flexible UI architecture that fits your business needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm real excited about this talk because it's the culmination of exactly a year's worth of learning and effort at my job--rewriting part of an application from AngularJS to React/TypeScript.&lt;/p&gt;
&lt;p&gt;In the process I became intimately familiar with how to build production React applications, using TypeScript with React more intensely, testing with Jest and &lt;a href="https://cypress.io"&gt;Cypress&lt;/a&gt;, and working with Apollo Server GraphQL (like fixing &lt;a href="https://kamranicus.com/posts/2018-03-06-graphql-apollo-object-caching"&gt;weird bugs&lt;/a&gt;). We solved some really interesting business problems that I'll dive into during the talk and ultimately created an elegant solution that has scaled nicely in terms of maintenance and agility for our product.&lt;/p&gt;
&lt;p&gt;Hope to see you there, please stop me and say hello! If you can, try to &lt;a href="https://pubconf.io/"&gt;attend PubConf&lt;/a&gt; too, it's a &lt;strong&gt;ton&lt;/strong&gt; of fun.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>New Pluralsight Guide: Composing React Components with TypeScript</title>
			<link>https://kamranicus.com/posts/2019-01-21-typescript-composing-react-components-pluralsight-guide</link>
			<description>&lt;p&gt;I just published my second Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/x5PN5"&gt;Composing React Components with TypeScript&lt;/a&gt;. I cover the basics of how to compose React components using common patterns like specialization, higher-order components (HOCs), and render props with TypeScript. Go ahead and check it out!&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2019-01-21-typescript-composing-react-components-pluralsight-guide</guid>
			<pubDate>Tue, 22 Jan 2019 01:31:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I just published my second Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/x5PN5"&gt;Composing React Components with TypeScript&lt;/a&gt;. I cover the basics of how to compose React components using common patterns like specialization, higher-order components (HOCs), and render props with TypeScript. Go ahead and check it out!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>2018 Year in Review and 2019 Goals</title>
			<link>https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals</link>
			<description>&lt;p&gt;Wow, what a year! &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year"&gt;At the start of 2018 I laid out my goals&lt;/a&gt; and I ended up crushing them! I hadn't heard of &lt;a href="https://syntax.fm/show/067/hasty-treat-goal-setting"&gt;&lt;em&gt;SMART&lt;/em&gt; goal setting yet&lt;/a&gt; but they ended up fitting the acronym: &lt;strong&gt;S&lt;/strong&gt;pecific, &lt;strong&gt;M&lt;/strong&gt;easurable, &lt;strong&gt;A&lt;/strong&gt;chievable, &lt;strong&gt;R&lt;/strong&gt;ealistic, and &lt;strong&gt;T&lt;/strong&gt;ime-bound.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals</guid>
			<pubDate>Fri, 21 Dec 2018 05:01:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Wow, what a year! &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year"&gt;At the start of 2018 I laid out my goals&lt;/a&gt; and I ended up crushing them! I hadn't heard of &lt;a href="https://syntax.fm/show/067/hasty-treat-goal-setting"&gt;&lt;em&gt;SMART&lt;/em&gt; goal setting yet&lt;/a&gt; but they ended up fitting the acronym: &lt;strong&gt;S&lt;/strong&gt;pecific, &lt;strong&gt;M&lt;/strong&gt;easurable, &lt;strong&gt;A&lt;/strong&gt;chievable, &lt;strong&gt;R&lt;/strong&gt;ealistic, and &lt;strong&gt;T&lt;/strong&gt;ime-bound.&lt;/p&gt;
&lt;h2 id="goals-in-review"&gt;Goals in Review&lt;/h2&gt;
&lt;p&gt;Let's review my 2018 and goals and see how I stacked up.&lt;/p&gt;
&lt;h2 id="primary-goals"&gt;Primary Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;✅ &lt;del&gt;Publish 1 more Pluralsight course&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Host a half-day workshop (scheduled for April)&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Participate in a LD game jam&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-ludum-dare-41-post-mortem"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Attend and present at 2 conferences&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon"&gt;DONE&lt;/a&gt; and &lt;a href="https://kamranicus.com/posts/2018-05-11-ndc-minnesota-typescript-react"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Attend and present at a local user group&lt;/del&gt; (&lt;a href="https://twitter.com/kamranayub/status/1037840790414864384"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Finish KTOMG UI revamp with React&lt;/del&gt; (&lt;a href="https://twitter.com/kamranayub/status/1055344465991344128"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;⛔ Continue doing code livestreams&lt;/li&gt;
&lt;li&gt;⛔ Publish another Pi guide for a project I have in mind&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="stretch-goals"&gt;Stretch Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;⛔ Become a Microsoft MVP
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nominated, but nope.&lt;/strong&gt; Unfortunately, somehow my MVP nomination fell through the cracks and I didn't hear back until September this year. They advised me to re-submit. 😞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;☑️ Publish 2 more Pluralsight courses
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;Yes! Almost.&lt;/a&gt; I ended up doing two courses at once this year.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Host a full-day workshop
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nope.&lt;/strong&gt; Work's been busy with a new release so while I want to start this soon, it won't be in 2018.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Stream 10 sessions
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nope.&lt;/strong&gt; Ended up not having the time/energy to do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="retro"&gt;Retro&lt;/h2&gt;
&lt;p&gt;I'm definitely proud of what I accomplished in 2018--especially the dual-wielding courses. That was a risky proposition but with proper tracking and progress checkpoints, I managed to do it in almost as many hours as it took for me to do my first course.&lt;/p&gt;
&lt;p&gt;It's clear my stretch goals were definite stretches! For my evenings, I have a few choices of what to do: laze about, contract work, &lt;a href="https://keeptrackofmygames.com"&gt;Keep Track of My Games&lt;/a&gt;, open source, house work. You may be surprised to know a lot of the time I do end up lazing about--but it's with my wife or friends, watching shows, playing board games, or generally enjoying people's company. So I don't think it's &lt;em&gt;necessarily&lt;/em&gt; unproductive! Still, those choices don't leave a ton of room for Twitch streaming. I'm just not positive it'll be a value-add activity for me, so I'm leaving it off my 2019 goals.&lt;/p&gt;
&lt;p&gt;The MVP goal was very disappointing. Eventually after 10 months, the program manager responded to my email and said to just try again as the window was lost. It's supposed to be a 90-day window but for some reason I just got lost in the process. &lt;strong&gt;It will&lt;/strong&gt; be on my 2019 goals again. New for 2019 is the requirement that you be nominated--luckily I have some MVP colleagues that are willing to put in a word for me! &lt;a href="https://twitter.com/kamranayub"&gt;Get in touch&lt;/a&gt; if you want to throw your weight in, too.&lt;/p&gt;
&lt;p&gt;Workshop? Just didn't have a chance. The half-day workshop was awesome and I'd do it again. In 2019 I may work on a React/TypeScript workshop and pitch it to Frontend Masters or to conferences. It may turn into a 2020 goal.&lt;/p&gt;
&lt;h2 id="other-year-end-accomplishments"&gt;Other Year-End Accomplishments&lt;/h2&gt;
&lt;p&gt;It's always the case you end up doing things you never planned. Here's what else I ended up accomplishing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hustle and passive income accounted for over 10% of my yearly earnings.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This was a goal I had in mind but didn't write down for 2018. I wanted to try and see if I could make my gig/passive income account for at least 10% of my earnings and &lt;strong&gt;it did!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="images/2018-12-20-23-15-14.png" class="img-fluid" alt="Hustlin and bustlin" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://kamranicus.com/posts/2018-12-20-typescript-react-components-pluralsight-guide"&gt;Published first Pluralsight guide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My first guide around TypeScript/React came out this last week!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://kamranicus.com/posts/2018-05-01-dotnetrocks-ravendb-podcast"&gt;Appeared on .NET Rocks to talk about RavenDB 4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How awesome is that?! Have been a fan for years and it was surreal to be on there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=bqP2O3VHjQ8"&gt;Appeared on Script &amp;amp; Style webcast to talk about Excalibur.js and web games&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/toddhgardner"&gt;Todd Gardner&lt;/a&gt; invited me on with my friend &lt;a href="https://twitter.com/erikonarheim"&gt;Erik&lt;/a&gt; to discuss building web games and our open source experience with &lt;a href="https://github.com/excaliburjs/Excalibur"&gt;Excalibur.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bought a house&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Found a good house for a good deal in a great neighborhood next to a school. The first project was done in May, which was to &lt;a href="https://twitter.com/kamranayub/status/999037691382632449"&gt;build an office wall&lt;/a&gt;! I'm super enthusiastic about learning to DIY and I can't recommend the &lt;a href="https://www.youtube.com/channel/UCnorhjQR4zJkT7AVNhu395Q"&gt;Home RenoVision&lt;/a&gt; YT channel enough as a learning resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Had another kid&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Baby girl in November, she's awesome!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Released React rewrite of &lt;a href="https://keeptrackofmygames.com"&gt;KTOMG&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This was huge! At least a 8-10 month endeavor. I still have plenty of work to do with KTOMG but at least that's out of the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Finished some games:&lt;/strong&gt; Far Cry 5, Destiny 2 (story), Telltale's Game of Thrones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Still working through Red Dead 2, AC: Syndicate, LoZ: BoW, and Witcher 3. They're all long, gimme some slack!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Published 13 blog posts&lt;/strong&gt;. Whoo!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Traveled to New England and Montreal with family&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://www.choosefi.com/009-travel-rewards-travel-world-free-ultimate-guide/"&gt;travel rewards&lt;/a&gt;, the flights were free and hotels were split with a family friend. We rented a car and drove from Boston around New England up to Montreal and back. It was awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Went through our finances with a fine-toothed comb&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This probably deserves its own post but I had a wake-up call of sorts and determined to eliminate a bunch of needless expenses we had been accumulating over the years. My wife and I are already fairly frugal people but didn't have a framework or the tools around it we needed. &lt;a href="https://www.choosefi.com/"&gt;Now we do&lt;/a&gt; and I'm super excited about it. I hope to do a post on it sometime in 2019. This aligns with me and my wife's 5- and 10-year plans for our family so I'm glad we started now.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="im-coming-for-you-2019"&gt;I'm Coming for You, 2019&lt;/h2&gt;
&lt;p&gt;With the SMART framework in mind, let's see if I can establish some goals to accomplish in 2019. Keeping in check that I have a new baby daughter, I'll need to focus on the &lt;strong&gt;Attainable&lt;/strong&gt; and &lt;strong&gt;Realistic&lt;/strong&gt; portions of the acronym.&lt;/p&gt;
&lt;h3 id="primary-goals-1"&gt;Primary Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publish 1 Pluralsight course on Azure or TypeScript or React by September&lt;/li&gt;
&lt;li&gt;Publish 4 Pluralsight guides on React &amp;amp; TypeScript by May&lt;/li&gt;
&lt;li&gt;Speak at NDC MN on a TypeScript topic&lt;/li&gt;
&lt;li&gt;Publish 5 technical articles on the blog about Azure, TypeScript, or React&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pay off all non-mortgage debt&lt;/li&gt;
&lt;li&gt;Passive income should account for 2% of earnings, 1099 income for 5%&lt;/li&gt;
&lt;li&gt;Replace my PCs at home with single good Ultrabook/Notebook and a NAS&lt;/li&gt;
&lt;li&gt;Push 3 substantive updates to KTOMG throughout the year: Steam review revamp, Raven 4 upgrade, and Linux hosting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn how to cut trim/baseboard and finish the nursery&lt;/li&gt;
&lt;li&gt;Finish my office decor/storage, maybe paint it too&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stretch-goals-1"&gt;Stretch Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a quarterly newsletter&lt;/li&gt;
&lt;li&gt;Publish 1 more Pluralsight course on Azure or TypeScript or React&lt;/li&gt;
&lt;li&gt;Publish 4 additional Pluralsight guides throughout the year&lt;/li&gt;
&lt;li&gt;Participate in 1 Pluralsight Mentoring session&lt;/li&gt;
&lt;li&gt;Become a Microsoft MVP with a focus on Azure/TypeScript content&lt;/li&gt;
&lt;li&gt;Speak at a JSConf or ReactConf event&lt;/li&gt;
&lt;li&gt;Speak at the React MN meetup about TypeScript or GraphQL&lt;/li&gt;
&lt;li&gt;Record a YouTube video walkthrough of my &lt;a href="https://kamranicus.com/guides/raspberry-pi-3-baby-monitor"&gt;Raspberry Pi baby monitor&lt;/a&gt; written guide&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1099 income should account for 12% or more (+2% over 2018)&lt;/li&gt;
&lt;li&gt;Travel completely free somewhere in the US with wife and 2 kids using miles/points&lt;/li&gt;
&lt;li&gt;Participate in Ludum Dare during the spring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.youtube.com/watch?v=OJqk2iS_jyQ"&gt;luxury vinyl plank&lt;/a&gt; in my office&lt;/li&gt;
&lt;li&gt;Replace baseboard/trim in my son's bedroom&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There you have it! These &lt;em&gt;seem&lt;/em&gt; pretty doable to me as I am well-positioned to accomplish most of them this next year. For 2019 I split the goals into sub-groups to organize them better. Focusing on professional growth, personal goals, and DIY skills!&lt;/p&gt;
&lt;p&gt;It's &lt;strong&gt;still a lot&lt;/strong&gt; but what's life without a little ambition? I can top 2018 if I work at it. As for the baby, I accomplished everything last year without compromising time with my family. I am confident I can do the same in 2019 if I focus on it!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>New Pluralsight Guide: How to Statically Type React Components with TypeScript</title>
			<link>https://kamranicus.com/posts/2018-12-20-typescript-react-components-pluralsight-guide</link>
			<description>&lt;p&gt;I just published my first Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/b7An9"&gt;How to Statically Type React Components with TypeScript&lt;/a&gt;. I cover the basics of how to annotate React components, props, state, and events with TypeScript. Go ahead and check it out!&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-12-20-typescript-react-components-pluralsight-guide</guid>
			<pubDate>Fri, 21 Dec 2018 03:22:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I just published my first Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/b7An9"&gt;How to Statically Type React Components with TypeScript&lt;/a&gt;. I cover the basics of how to annotate React components, props, state, and events with TypeScript. Go ahead and check it out!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As you may know if you &lt;a href="https://twitter.com/kamranayub"&gt;follow me on social media&lt;/a&gt;, baby #2 dropped in November so I'm taking a good amount of time before I commit to a big contract like &lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;doing two Pluralsight courses at once&lt;/a&gt;. That was well worth it but quite a feat.&lt;/p&gt;
&lt;p&gt;Still--I'm not one to sit around long and evenings are still protected time. One thing I love about doing Pluralsight work is that they have a myriad of opportunities besides just doing video courses. One of them is assessments, which I did a few months back, by writing questions for the JavaScript ES6 assessment (I worked with 2 other authors on that). Another recent opportunity has been &lt;a href="https://pluralsight.pxf.io/9e5XW"&gt;Guides&lt;/a&gt; which are in their infancy. I imagine the team has big plans for that section of the site.&lt;/p&gt;
&lt;p&gt;I reached out to my ASM last week and said I'd be interested in some low-key work and guides came up as a good activity, so I took a look and &lt;em&gt;lo and behold&lt;/em&gt; I had struck some gold. It turns out, they need some guides around using React with TypeScript.&lt;/p&gt;
&lt;p&gt;And you know what I think about that. &lt;a href="/events"&gt;I like it a lot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I offered to start with the first objective I thought I could tackle. It took me about 4 hours and that included planning and rewriting it once to adhere to the standards/guidelines. I think next time I'll be able to get it down to 2-3 hours. I'm always willing to try these opportunities 2-3 times before deciding if they're worth the investment. The time tracking I started doing for the last courses helps immensely!&lt;/p&gt;
&lt;p&gt;&lt;img src="images/2018-12-20-22-31-34.png" class="img-fluid" alt="Didn't take long at all" /&gt;&lt;/p&gt;
&lt;p&gt;Looking forward to the next guide, which I'll pick up next week hopefully!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Two New Pluralsight Courses on Azure Storage Published</title>
			<link>https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses</link>
			<description>&lt;p&gt;The first week of October I released not one but &lt;strong&gt;TWO&lt;/strong&gt; Pluralsight courses I've been hard at work on the past few months:&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses</guid>
			<pubDate>Fri, 26 Oct 2018 03:22:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The first week of October I released not one but &lt;strong&gt;TWO&lt;/strong&gt; Pluralsight courses I've been hard at work on the past few months:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementing Azure CDN with Azure Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCDN"&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47162935-95932a80-d2ba-11e8-8d95-a037ca745333.png" class="img-fluid" alt="Azure CDN course link" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCDN"&gt;Watch the course now&lt;/a&gt;. This course covers a lot of how Azure CDN works and various ways to integrate it with Azure blob service. I walk through how Azure CDN works at a high-level, then dive down into ways to automate the creation of CDN profiles/endpoints and how to serve content from blob storage. I cover Azure PowerShell, Azure CLI, REST, and ARM templates. I also spend a whole module on serving content securely using Shared Access Signature (SAS) tokens in different ways including pass-through authentication, hidden SAS authentication, and CDN token authentication.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuring CORS with Azure Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCORS"&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47162956-9f1c9280-d2ba-11e8-9109-b93dfe96dee5.png" class="img-fluid" alt="Azure CORS course link" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCORS"&gt;Watch the course now&lt;/a&gt;. This course covers configuring Cross-Origin Resource Sharing (CORS) with Azure Storage accounts. First, we spend time on what CORS is, how it works, what it's &lt;strong&gt;not&lt;/strong&gt; (hint: it's not a way to do authentication!), and then how Azure evaluates CORS rules internally. Then I walk through several automation scenarios in Azure PowerShell, Azure CLI, and REST. By the way, I've &lt;a href="https://github.com/kamranayub/azure-storage-rest-postman"&gt;open sourced a Postman collection&lt;/a&gt; that handles signing Azure Storage REST requests, if you're interested.&lt;/p&gt;
&lt;h2 id="building-two-courses-at-once"&gt;Building two courses at once&lt;/h2&gt;
&lt;p&gt;As you may know, I &lt;a href="https://kamranicus.com/posts/2018-02-08-ravendb-4-course-live"&gt;released a RavenDB 4 course&lt;/a&gt; earlier this year so this was not my first experience making a course. But it &lt;strong&gt;was&lt;/strong&gt; my first time doing two courses at once!&lt;/p&gt;
&lt;p&gt;The genesis of these courses was sparked by meeting with a Pluralsight &amp;quot;author success manager&amp;quot; (aka ASM) at NDC MN on the speaker boat cruise (which reminds me, &lt;a href="https://ndcminnesota.com/"&gt;register for NDC MN 2019&lt;/a&gt;!). I was meeting her to get some author swag! We got into a conversation about what courses I'd do in the future and I mentioned I was thinking of diversifying my next set. She asked, &amp;quot;Do you know anything about Microsoft Azure?&amp;quot; and I was like, &amp;quot;Yeah!&amp;quot; 😎&lt;/p&gt;
&lt;p&gt;We decided early on that because these two courses were similar that I could potentially do both at once. I was really happy my ASM believed I could do it but I wasn't sure &lt;em&gt;I&lt;/em&gt; could. I knew that I had a hard deadline of November as that's when the next baby comes along (it's &lt;em&gt;too&lt;/em&gt; close now...). At the time we were discussing it, it was May/June. These courses were a little special in that they are considered &amp;quot;partner&amp;quot; courses with Microsoft so they involved back-and-forth with Microsoft that would extend the course timelines.&lt;/p&gt;
&lt;p&gt;Still, the opportunity to do &lt;strong&gt;two&lt;/strong&gt; courses was not something I'd be offered every time and it would be in-line with my &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year#goals"&gt;2018 stretch goal&lt;/a&gt; of doing two additional courses. So I said yes. But I knew I had to plan these courses differently than my first due to the tighter timelines.&lt;/p&gt;
&lt;p&gt;By the time the proposal process finished and after a vacation in August, the actual timeline I ended up working with was mid-August to October 8. &lt;strong&gt;It was about 2 months less than I thought I'd have!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="tracking-time"&gt;Tracking time&lt;/h2&gt;
&lt;p&gt;Let me start by telling you that building these two courses took exactly &lt;strong&gt;112 hours&lt;/strong&gt;. I &lt;strong&gt;know&lt;/strong&gt; this because I was religiously tracking time. I had also created a task plan for each course at the start, here's what my Trello cards looked like:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47169134-553aa900-d2c8-11e8-8cb2-5608d42ab953.png" class="img-fluid" alt="Trello cards" /&gt;&lt;/p&gt;
&lt;p&gt;You can see the duration for each card and the number of tasks I was tracking. I used the Trello Power-Up, &lt;a href="https://trello.com/power-ups/59cf411fe342369bca2565b9/timecamp"&gt;TimeCamp&lt;/a&gt;, to track time by just clicking a button on the Trello card. I really liked how easy this was; I always had my cards up anytime I worked on the courses and I'd just flip between them tracking time.&lt;/p&gt;
&lt;p&gt;Now, using this data, I can actually see what hours over time look like for each course (note the timescales differ):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CDN With Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47540021-bd752600-d898-11e8-809f-1057dac567d3.png" class="img-fluid" alt="Hours over time" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CORS with Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47540071-ec8b9780-d898-11e8-84bc-cc8672ca1d71.png" class="img-fluid" alt="Hours over time" /&gt;&lt;/p&gt;
&lt;p&gt;A few observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The red dotted line was my hours budget.&lt;/strong&gt; Based on the proposal and scope of work, I budgeted 60h for each course. You can see I went over my budget for the CDN course since there was a 3rd module but my CORS course was well under budget at 45h, so overall I feel really good about the planning that went into the courses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Production ramped up in September.&lt;/strong&gt; If you notice, I did not start the CDN course actively until Aug 18 and the CORS course actively until the 4th of Sep. By looking at the flat lines, you can see when I submitted a module and waited for review. I didn't really start crunching until Sep 11. By the way, that last bit Oct 1 to Oct 9 was the final module for the CDN course. Phew. 😅&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Why did I even put a hours budget?&lt;/em&gt; Pluralsight pays a course completion fee for every produced course and this fee varies by course. I wanted to see if I could target a specific hourly bill rate with the fee I agreed to. I ended up exceeding my target rate which is a good thing--it means even if these courses made zero royalties, I was already compensated for the work put into producing them. I &lt;strong&gt;do&lt;/strong&gt; get royalties for these, though so that's just a bonus.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why were the first module reviews so long?&lt;/em&gt; Both courses were subject to Microsoft Subject Matter Expert (SME) review and that took awhile to work through. After the first modules, it was a much faster turnaround.&lt;/p&gt;
&lt;h2 id="planning-tasks"&gt;Planning tasks&lt;/h2&gt;
&lt;p&gt;The task planning was straightforward. I planned out each step of the production process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Proposal tasks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;for each module&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;Content tasks&lt;/li&gt;
&lt;li&gt;Recording tasks&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Post-production tasks&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In practice, here's what that looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47169804-173e8480-d2ca-11e8-954d-fa04cb8f8dad.png" class="img-fluid" alt="Trello tasks" /&gt;&lt;/p&gt;
&lt;p&gt;This was really helpful--not only to plan but also to track progress day-to-day.&lt;/p&gt;
&lt;p&gt;Knowing these numbers will help me properly plan for courses down the road.&lt;/p&gt;
&lt;h2 id="producing-the-course"&gt;Producing the course&lt;/h2&gt;
&lt;h3 id="content-creation"&gt;Content creation&lt;/h3&gt;
&lt;p&gt;As you maybe could guess from the time pattern above, I would work on one module for one course and once submitted, flip to the other course. This worked out well, in fact I finished some modules before feedback for the previous one came back to me.&lt;/p&gt;
&lt;p&gt;And this time, I actually wrote script. I knew I couldn't wing it every single time I sat down to record with such a compressed timeline since that would make each recording session take 2-3x longer with my retakes. I'd write my script in the Notes section of the PowerPoint. Sometimes I'd vary slightly when recording from what I had written but since I write very conversationally it wasn't a big issue. It helped reduce the retakes &lt;strong&gt;a lot&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I started each module by finishing the content first, starting with a rough entire module slide deck, then filling out the content for each clip. The order and names of the clips would generally change as I discovered better ways to flow the content but the objectives almost always stayed the same (it definitely helps to be clear on your module objectives during the proposal process).&lt;/p&gt;
&lt;h3 id="recording-demos"&gt;Recording demos&lt;/h3&gt;
&lt;p&gt;The way I recorded demos also changed a bit. This time, I divided demos into sections (with slide-based script and screenshots which doubled as a transcript) and narrated first then ran through the visual steps (or vice versa). This made it much easier to cut together and keep me focused. If I didn't do this, it would be hard to maintain the position of the mouse or if I encountered an issue, backtracking and editing together two disparate parts. I had to let go a bit of some of my perfectionist nature--sometimes I wished I could just redo entire clips but I knew I didn't have much time. The peer reviews came back very positive so I feel pretty good about the end product regardless!&lt;/p&gt;
&lt;p&gt;One thing I'd definitely do again is to &lt;a href="https://github.com/kamranayub/pluralsight-azure-cdn-with-storage/blob/master/.vscode/settings.json"&gt;set up a custom VS Code settings file&lt;/a&gt; for the materials folder. It allowed me to always keep a consistent VS Code experience and turned off a bunch of stuff that would make it tougher to edit. I've found for all three of my courses, VS Code works for any code demos--it has the terminal, files, everything, it's super clean and super fast.&lt;/p&gt;
&lt;p&gt;I just saw this tip today, too! Heck yeah!&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;One thing &lt;a href="https://twitter.com/code?ref_src=twsrc%5Etfw"&gt;&amp;#64;code&lt;/a&gt; has going for it is the ability to create &amp;quot;profiles&amp;quot; by supplying CLI args when you open it. Combine it with an alias and 💥 I can open VSCode with my screencast settings in an instant. Thanks for the tip &lt;a href="https://twitter.com/avanslaars?ref_src=twsrc%5Etfw"&gt;&amp;#64;avanslaars&lt;/a&gt; and &lt;a href="https://twitter.com/jlengstorf?ref_src=twsrc%5Etfw"&gt;&amp;#64;jlengstorf&lt;/a&gt; &lt;a href="https://t.co/3RfdeSvHHO"&gt;pic.twitter.com/3RfdeSvHHO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kyle Shevlin (&amp;#64;kyleshevlin) &lt;a href="https://twitter.com/kyleshevlin/status/1055666040401670145?ref_src=twsrc%5Etfw"&gt;October 26, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="working-with-a-big-monitor"&gt;Working with a big monitor&lt;/h3&gt;
&lt;p&gt;There &lt;em&gt;was&lt;/em&gt; an issue I needed to work through right away which was how I record on an Ultrawide screen. &lt;a href="https://www.amazon.com/gp/product/B01N6S1P2D?&amp;amp;_encoding=UTF8&amp;amp;tag=kamranicus-20&amp;amp;linkCode=ur2&amp;amp;linkId=5427a9094117f6bab8eaccbcc18af141&amp;amp;camp=1789&amp;amp;creative=9325"&gt;I love my monitor&lt;/a&gt; (affiliate link). But it makes it a huge pain to record applications and presentations because they need to be recorded at 1280x720.&lt;/p&gt;
&lt;p&gt;What I ended up doing was two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Record PowerPoint using a secondary output to my PC.&lt;/strong&gt; Wait, what? Well, my monitor has multiple outputs including DVI, HDMI, and DisplayPort. I ended up plugging &lt;em&gt;both&lt;/em&gt; my DisplayPort (primary) and HDMI (secondary) into my PC so that I could &lt;em&gt;extend&lt;/em&gt; my desktop onto the HDMI output at 1280x720. This made it pretty straightforward to put PowerPoint presentations on that &amp;quot;monitor&amp;quot; and record. Because Presenter View in PowerPoint shows you the slides, it worked well. I &lt;em&gt;would&lt;/em&gt; have preferred a proper chromeless borderless window that PowerPoint could present on but that isn't available. The windowed mode has a ton of chrome, has no presenter view, and is awkward to deal with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use a window resizer tool.&lt;/strong&gt; I would recommend the tool &lt;a href="http://www.brianapps.net/sizer/"&gt;Sizer&lt;/a&gt; by Brian. It works with Windows 10 just fine and allows you to set presets for different window sizes and switch to them quickly for the active application. This allowed me to easily record applications wherever they were on my monitor and even overlay them on top of each other to quickly switch apps without stopping the recording.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="would-i-do-anything-differently"&gt;Would I do anything differently?&lt;/h2&gt;
&lt;p&gt;Well, it's clear with enough planning and ideally &lt;em&gt;3 months&lt;/em&gt; of time, it's very reasonable for me to tackle two short courses simultaneously. Compressing down to 2 months was tough on my evenings though in retrospect I should have done a few more hours a week nearer the beginning to ease the load on the last bits.&lt;/p&gt;
&lt;p&gt;Overall, I'm happy with the result and would do it again. A &lt;strong&gt;huge&lt;/strong&gt; thanks to my supportive Pluralsight team who encouraged me to do it and provided everything I needed to succeed.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Course-wise, nothing for awhile, honestly. Producing two courses puts me at &lt;strong&gt;3 Pluralsight courses&lt;/strong&gt; for &lt;em&gt;my first year&lt;/em&gt; which I think is pretty amazing. The new baby is coming in the next couple weeks and I'll be busy with that for 6-8 months. The first months of having an infant will consist of sleepless nights, toddler wrangling, and extreme tiredness. Instead of committing to new courses during that turbulent time, I will be focusing on &lt;a href="http://excaliburjs.com"&gt;Excalibur&lt;/a&gt; and &lt;a href="https://keeptrackofmygames.com"&gt;Keep Track of My Games&lt;/a&gt; work. Oh, and home improvements, which I'd like to write more about. I also plan to propose some talks for 2019! I want to say that any new coursework won't be planned until the back half of 2019. We'll see if I can stay put that long 😊&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Showing Custom UI on React Router Transitions</title>
			<link>https://kamranicus.com/posts/2018-07-26-react-router-custom-transition-ui</link>
			<description>&lt;p&gt;We had a recent requirement on our project to prompt the user with a custom modal when they have some pending changes to save in our application. The intention was to ensure they saved their changes as it affected other parts of the data they're working on and we need to recompute business rules (fun, huh?).&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-07-26-react-router-custom-transition-ui</guid>
			<pubDate>Thu, 26 Jul 2018 13:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;We had a recent requirement on our project to prompt the user with a custom modal when they have some pending changes to save in our application. The intention was to ensure they saved their changes as it affected other parts of the data they're working on and we need to recompute business rules (fun, huh?).&lt;/p&gt;
&lt;p&gt;Since we're leveraging &lt;a href="https://reacttraining.com/react-router/web/guides/philosophy"&gt;React Router v4&lt;/a&gt;, I looked into what was provided out of the box to see how customizable it was.&lt;/p&gt;
&lt;h2 id="the-prompt-component"&gt;The Prompt Component&lt;/h2&gt;
&lt;p&gt;React Router core has a component called &lt;a href="https://reacttraining.com/react-router/core/api/Prompt"&gt;&lt;code&gt;Prompt&lt;/code&gt;&lt;/a&gt;. The purpose of this component is to &lt;a href="https://reacttraining.com/react-router/web/example/preventing-transitions"&gt;show a dialog to the user during a router transition&lt;/a&gt;. The &lt;code&gt;when&lt;/code&gt; prop can be set to enable/disable this functionality dynamically which is great. You can also pass a &lt;code&gt;message&lt;/code&gt; that will get displayed or a function that takes a &lt;code&gt;location&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt; to allow navigation or a message to prevent.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;&amp;lt;Prompt when={true} message=&amp;quot;Please save your changes before proceeding&amp;quot; /&amp;gt;
&amp;lt;Prompt when={true} message={location =&amp;gt; location.pathname === &amp;quot;/foo&amp;quot; ? true : &amp;quot;Denied&amp;quot;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/43242206-4b62f540-9065-11e8-80bb-d4ca944cc9ea.png" class="img-fluid" alt="The default prompt" /&gt;&lt;/p&gt;
&lt;p&gt;However, I noticed a few caveats with this component. First, the default prompt is the browser prompt and when you click 'Okay' it &lt;em&gt;allows navigation&lt;/em&gt; which is exactly the opposite of what I want. Second, you can't render custom UI directly through &lt;code&gt;Prompt&lt;/code&gt;--it just takes a &lt;code&gt;message&lt;/code&gt;. Why? If you &lt;a href="https://github.com/ReactTraining/react-router/blob/e6f9017c947b3ae49affa24cc320d0a86f765b55/packages/react-router/modules/Prompt.js#L30"&gt;dive down&lt;/a&gt; into the code, it leverages the &lt;a href="https://www.npmjs.com/package/history"&gt;history&lt;/a&gt; npm package which just delegates to that browser prompt. The good news is, the &lt;code&gt;history&lt;/code&gt; package allows you to override the UI generation via &lt;a href="https://www.npmjs.com/package/history#customizing-the-confirm-dialog"&gt;&lt;code&gt;getUserConfirmation&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import createHistory from &amp;quot;history/browserHistory&amp;quot;;

const history = createHistory({
  getUserConfirmation(message, callback) {
    // Show some custom dialog to the user and call
    // callback(true) to continue the transiton, or
    // callback(false) to abort it.
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is helpful, using this we can always prevent the transition if needed. So, given that we can't use &lt;code&gt;Prompt&lt;/code&gt; directly to render custom React UI but we &lt;em&gt;can&lt;/em&gt; override the core handler for showing the prompt, is there a way to connect the two? Of course.&lt;/p&gt;
&lt;h2 id="overriding-getuserconfirmation"&gt;Overriding getUserConfirmation&lt;/h2&gt;
&lt;p&gt;First, let's test our assumption out and see if we can log the message we get from &lt;code&gt;Prompt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using the regular &lt;code&gt;BrowserRouter&lt;/code&gt; component from &lt;code&gt;react-router-dom&lt;/code&gt;, pass the &lt;code&gt;getUserConfirmation&lt;/code&gt; prop:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const getUserConfirmation = (message, callback) =&amp;gt; {
  console.log(message);
  callback(false);
}

&amp;lt;BrowserRouter getUserConfirmation={getUserConfirmation}&amp;gt;
...
&amp;lt;/BrowserRouter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If like me you are using &lt;code&gt;connected-react-router&lt;/code&gt;, we can still customize the &lt;code&gt;createHistory&lt;/code&gt; call as shown above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;...
import { createBrowserHistory } from 'history'
import { applyMiddleware, compose, createStore } from 'redux'
import { connectRouter, routerMiddleware } from 'connected-react-router'
...
const history = createBrowserHistory({
  getUserConfirmation(message, callback) {
    console.log(message);
    callback(false);
  }
})

const store = createStore(
  connectRouter(history)(rootReducer), // new root reducer with router state
  initialState,
  compose(
    applyMiddleware(
      routerMiddleware(history), // for dispatching history actions
      // ... other middlewares ...
    ),
  ),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then our Prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// MyComponent.js
&amp;lt;Prompt when={true} message=&amp;quot;Please save your changes before proceeding&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you set this up, when you try to navigate away from the page, you will not be able to and the message will be logged to the console.&lt;/p&gt;
&lt;p&gt;Great! Now you may be thinking, &amp;quot;We can just pass anything and it'll get passed through!&amp;quot; But you'd be wrong because that's what I thought too.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const MyCustomDialogComponent = () =&amp;gt; &amp;lt;div /&amp;gt;

&amp;lt;Prompt
  when={true}
  message={MyCustomDialogComponent}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you try this, nothing will be logged to the console and navigation will not be blocked. React Router uses prop-types to validate &lt;code&gt;message&lt;/code&gt; is a string (phooey!).&lt;/p&gt;
&lt;p&gt;So, we have to stick with strings. Is there another way besides doing a bunch of work to add support for this in &lt;code&gt;react-router&lt;/code&gt; directly (which'd be neat!)?&lt;/p&gt;
&lt;h2 id="using-a-hoc-with-a-global-symbol-based-trigger"&gt;Using a HOC with a Global Symbol-based Trigger&lt;/h2&gt;
&lt;p&gt;I landed on this approach as it seemed to be the less hacky way to achieve this. Essentially, since we can pass a string only to the &lt;code&gt;getUserConfirmation&lt;/code&gt;, I pass in the key for a global &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;Symbol&lt;/a&gt; and store a global trigger to signal to the React dialog component to show.&lt;/p&gt;
&lt;p&gt;If you haven't used &lt;code&gt;Symbol&lt;/code&gt; before, it is a primitive type in JavaScript introduced in ES6. What's neat about them is you can &amp;quot;register&amp;quot; them globally and they will be able to be looked up from other modules loaded within the same &amp;quot;code realm&amp;quot; (roughly the execution context of the engine). Well-known global symbols are built-in like &lt;code&gt;Symbol.iterator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why a &lt;code&gt;Symbol&lt;/code&gt; vs. just a regular string? A &lt;code&gt;Symbol&lt;/code&gt;-based property won't be &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Symbols_and_for...in_iteration"&gt;enumerable&lt;/a&gt; (like using &lt;code&gt;Object.keys&lt;/code&gt;) so it's kind of a way to do basic &amp;quot;private&amp;quot; properties. They can still be enumerated with other methods like &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;. It creates a nice barrier between things your app might care about and walls it off unless someone explictly asks for that property.&lt;/p&gt;
&lt;p&gt;So what does this end up looking like? We create a HOC that has basic state and a method that will show the dialog when triggered (user attempts to navigate away). The &lt;code&gt;getUserConfirmation&lt;/code&gt; handler will receive the Symbol key and invoke the callback on the global object (&lt;code&gt;window&lt;/code&gt;) with that Symbol property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// PreventNavigationDialog.js
class PreventNavigationDialog extends React.Component {

  state = { open: false };

  constructor() {
    super();

    // NOTE: Don't actually use Date.now. In the example
    // repo, I use the `cuid` package
    this.__trigger = Symbol.for(`__PreventNavigationDialog_${Date.now()}`);
  }

  componentDidMount() {
    window[this.__trigger] = this.show;
  }

  componentWillUnmount() {
    delete window[this.__trigger];
  }

  render() {
    const { when } = this.props;
    const { open } = this.state;

    return (
      &amp;lt;React.Fragment&amp;gt;
        &amp;lt;Prompt when={when} message={Symbol.keyFor(this.__trigger)} /&amp;gt;
        {open &amp;amp;&amp;amp; &amp;lt;div onClick={this.close}&amp;gt;Test dialog&amp;lt;/div&amp;gt;}
      &amp;lt;/React.Fragment&amp;gt;
    );
  }

  show = allowTransitionCallback =&amp;gt; {
    this.setState({ open: true }, () =&amp;gt; allowTransitionCallback(false));
  };

  close = () =&amp;gt; {
    this.setState({ open: false });
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// index.js

const getUserConfirmation = (dialogKey, callback) =&amp;gt; {

  // use &amp;quot;message&amp;quot; as Symbol-based key
  const dialogTrigger = window[Symbol.for(dialogKey)];

  if (dialogTrigger) {
    // delegate to dialog and pass callback through
    return dialogTrigger(callback);
  }

  // Fallback to allowing navigation
  callback(true);
}

&amp;lt;BrowserRouter getUserConfirmation={getUserConfirmation}&amp;gt;
...
&amp;lt;/BrowserRouter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, a bit going on here!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, define our shared Symbol. Using &lt;code&gt;Symbol.for&lt;/code&gt; will register the Symbol globally so it can be accessed across the page. We assign it a unique key for lookup (I recommend &lt;a href="https://www.npmjs.com/package/cuid"&gt;&lt;code&gt;cuid&lt;/code&gt;&lt;/a&gt; for real world usage).&lt;/li&gt;
&lt;li&gt;Next, define our HOC with some basic state. It takes in a &lt;code&gt;when&lt;/code&gt; prop just like &lt;code&gt;Prompt&lt;/code&gt; (and passes it down). It also has a simple &lt;code&gt;open&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;When our HOC mounts, it registers our &lt;code&gt;show&lt;/code&gt; trigger globally. It cleans up in case it is unmounted.&lt;/li&gt;
&lt;li&gt;Modify &lt;code&gt;getUserConfirmation&lt;/code&gt; to check and see if a dialog trigger callback exists and call it if so. Since we assign it when the HOC mounts, it will set the state of the dialog.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The nice thing about this design is that we're allowing for multiple potential dialog prompts across the app. We can even have multiple instances of this component without conflict using the uniqueness nature of Symbols. I'm not a huge fan of using &lt;code&gt;window&lt;/code&gt; but it has its uses--it's tough to avoid &lt;em&gt;something&lt;/em&gt; due to how we need to access it in &lt;code&gt;getUserConfirmation&lt;/code&gt; and we can't pass anything but a string.&lt;/p&gt;
&lt;h2 id="demo-and-code"&gt;Demo and Code&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/43242522-2e47c664-9067-11e8-8799-0e2c9723bf9f.png" class="img-fluid" alt="End result" /&gt;&lt;/p&gt;
&lt;p&gt;You can play with the &lt;a href="https://codesandbox.io/s/myw173jyq8"&gt;fully working CRA-based demo&lt;/a&gt; with Material UI on CodeSandbox or the &lt;a href="https://github.com/kamranayub/example-react-router-transition-ui/tree/master/"&gt;corresponding GitHub repo&lt;/a&gt;. The demo has a few more features like passing &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; content as well as using the &lt;code&gt;(location: Location) =&amp;gt; boolean | string&lt;/code&gt; overload that &lt;code&gt;Prompt&lt;/code&gt; &lt;code&gt;message&lt;/code&gt; prop supports to decide whether to allow transitions based on target location (we use this for our app).&lt;/p&gt;
&lt;p&gt;It wouldn't take much to change this HOC to leverage the render props pattern, for example, to show &lt;em&gt;whatever you want&lt;/em&gt; by passing down &lt;code&gt;show&lt;/code&gt;. Reuse it across your app!&lt;/p&gt;
&lt;p&gt;This was an interesting issue to solve and it wasn't as easy as I hoped initially. I hope this helps other people! This could probably be packaged up as a customizable HOC with a little work. Maybe when I have a spare moment I'll stream making a package out of this. Remember to follow me on &lt;a href="https://twitch.tv/kamranicus"&gt;Twitch&lt;/a&gt;!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Flattening Deeply Nested Components in React</title>
			<link>https://kamranicus.com/posts/2018-07-07-react-nesting-components-flat</link>
			<description>&lt;p&gt;Here's a quick tip. Often in entry points of React applications, you have to do some bootstrapping with various providers from dependent modules like Material UI, Redux, JSS, and React Router. That's exactly the stack I'm using so that's what my example is based on.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-07-07-react-nesting-components-flat</guid>
			<pubDate>Sat, 07 Jul 2018 15:33:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Here's a quick tip. Often in entry points of React applications, you have to do some bootstrapping with various providers from dependent modules like Material UI, Redux, JSS, and React Router. That's exactly the stack I'm using so that's what my example is based on.&lt;/p&gt;
&lt;p&gt;Normally, you would do this to bootstrap your &lt;code&gt;App&lt;/code&gt; component:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;React.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;ConnectedRouter history={history}&amp;gt;
      &amp;lt;JssProvider jss={jss} generateClassName={generateClassName}&amp;gt;
        &amp;lt;MuiThemeProvider theme={theme}&amp;gt;
          &amp;lt;MuiPickersUtilsProvider utils={MomentUtils}&amp;gt;
            &amp;lt;App /&amp;gt; {/* FINALLY */}
          &amp;lt;/MuiPickersUtilsProvider&amp;gt;
        &amp;lt;/MuiThemeProvider&amp;gt;
      &amp;lt;/JssProvider&amp;gt;
    &amp;lt;/ConnectedRouter&amp;gt;
  &amp;lt;/Provider&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It feels like I'm in Dante's Inferno creating the 9 circles of hell. I'm being dramatic of course--this is readable and probably fine. But there are situations with nesting even worse than this. If you're interested in how to flatten this out, read on.&lt;/p&gt;
&lt;h2 id="recompose"&gt;Recompose&lt;/h2&gt;
&lt;p&gt;I like the &lt;a href="#recompose"&gt;recompose&lt;/a&gt; utility library, it adds some functional helpers to React apps. One helper that we'll leverage here is called &lt;code&gt;nest&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { nest } from &amp;quot;recompose&amp;quot;;

const AppProviders = nest(
  Provider,
  ConnectedRouter,
  JssProvider,
  MuiThemeProvider,
  MuiPickersUtilsProvider
);

ReactDOM.render(
  &amp;lt;AppProviders 
    store={store} 
    history={history} 
    jss={jss} 
    generateClassName={generateClassName} 
    theme={theme} 
    utils={MomentUtils}
  &amp;gt;    
    &amp;lt;App /&amp;gt; {/* That's a bit better */}
  &amp;lt;/AppProviders&amp;gt;,
  document.getElementById('root')
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This actually works. What's happening here is that &lt;code&gt;nest&lt;/code&gt; will take each component you give it and nest one after the other, in order of top to bottom. What you can do then is pass props that &lt;strong&gt;get passed to each nested component&lt;/strong&gt;. This is the important bit and as it turns out will cause warnings in the console because some components have prop validation that will get angry at you if you pass them props they don't expect.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;index.js:2178 Warning: Failed prop type: The following properties are not supported: `store`, `history`, `jss`, `generateClassName`, `utils`. Please remove them.
    in MuiThemeProvider (created by nest(Provider, ConnectedRouter, JssProvider, MuiThemeProvider, MuiPickersUtilsProvider))
    in nest(Provider, ConnectedRouter, JssProvider, MuiThemeProvider, MuiPickersUtilsProvider)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oopsie. &lt;code&gt;nest&lt;/code&gt; does accept stateless components as arguments, though. Let's do that!&lt;/p&gt;
&lt;h2 id="nest-with-stateless-components"&gt;Nest with Stateless Components&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { nest } from &amp;quot;recompose&amp;quot;;

// Nest providers in this order (top to bottom)
const withProviders = wrap(
  ({ children }) =&amp;gt; &amp;lt;Provider store={store}&amp;gt;{children}&amp;lt;/Provider&amp;gt;,
  ({ children }) =&amp;gt; &amp;lt;ConnectedRouter history={history}&amp;gt;{children}&amp;lt;/ConnectedRouter&amp;gt;,
  ({ children }) =&amp;gt; (
    &amp;lt;JssProvider jss={jss} generateClassName={generateClassName}&amp;gt;
      {children}
    &amp;lt;/JssProvider&amp;gt;
  ),
  ({ children }) =&amp;gt; &amp;lt;MuiThemeProvider theme={theme}&amp;gt;{children}&amp;lt;/MuiThemeProvider&amp;gt;,
  ({ children }) =&amp;gt; (
    &amp;lt;MuiPickersUtilsProvider utils={MomentUtils}&amp;gt;{children}&amp;lt;/MuiPickersUtilsProvider&amp;gt;
  )
);

ReactDOM.render(
  React.createElement(withProviders(App)), 
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright. This also works. Buuuuut, I mean, c'mon, this somehow seems &lt;em&gt;worse&lt;/em&gt;, right?&lt;/p&gt;
&lt;p&gt;Is there a middle-ground of readability and less duplicated code? Of course! Let's just write a little helper to take pairs of components and their props and pass that to &lt;code&gt;nest&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="nesting-with-componentprop-pairs"&gt;Nesting with Component/Prop Pairs&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// Nest components in this order (top to bottom)
const AppProviders = nestPairs(
  [Provider, { store }],
  [ConnectedRouter, { history }],
  [JssProvider, { jss, generateClassName }],
  [MuiThemeProvider, { theme }],
  [MuiPickersUtilsProvider, { utils: MomentUtils }]
);

ReactDOM.render(
  &amp;lt;AppProviders&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/AppProviders&amp;gt;, 
  document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hey! That looks more readable &lt;em&gt;and&lt;/em&gt; solves the prop passing issue. This is what &lt;code&gt;nestPairs&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;function nestPairs(...componentPropPairs) {
  return nest.apply(
    this,
    componentPropPairs.map(([ComponentClass, props]) =&amp;gt; 
      ({ children }) =&amp;gt; 
        React.createElement(ComponentClass, { ...props, children })
    )
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in TypeScript (what I'm using):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function nestPairs(this: any, ...componentPropPairs: Array&amp;lt;[React.ComponentType, any]&amp;gt;) {
  return nest.apply(
    this,
    componentPropPairs.map(([ComponentClass, props]): React.StatelessComponent&amp;lt;
      any
    &amp;gt; =&amp;gt; ({ children }) =&amp;gt; React.createElement&amp;lt;any&amp;gt;(ComponentClass, { ...props, children }))
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are taking the array pairs and mapping them to stateless components with all the blanks filled in. This keeps the input
relatively simple while still allowing custom props per component. In TypeScript, the downside is that you lose the strong
typing compared to the previous version but I'm willing to do that since in my case, this is only used in the entrypoint of
our app so it'll be real apparent if things don't work.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Handling Multiple Scalar Types in GraphQL</title>
			<link>https://kamranicus.com/posts/2018-07-02-handling-multiple-scalar-types-in-graphql</link>
			<description>&lt;p&gt;I've been using &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; for awhile now at work and I think it's pretty wonderful. I like how it has a consistent way to describe API contracts and has mechanisms to handle lots of different data fetching scenarios. Similar to other static type systems like TypeScript or Flow, in GraphQL you add type annotations to schemas for the server to enforce. If you need to describe a type as "this or that" like "string or integer", this is what's called a &lt;strong&gt;type union.&lt;/strong&gt; The GraphQL spec supports type unions for objects but &lt;a href="https://github.com/facebook/graphql/issues/215"&gt;it doesn't yet support scalar type unions&lt;/a&gt; (since 2016).&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-07-02-handling-multiple-scalar-types-in-graphql</guid>
			<pubDate>Mon, 02 Jul 2018 16:55:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I've been using &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; for awhile now at work and I think it's pretty wonderful. I like how it has a consistent way to describe API contracts and has mechanisms to handle lots of different data fetching scenarios. Similar to other static type systems like TypeScript or Flow, in GraphQL you add type annotations to schemas for the server to enforce. If you need to describe a type as &amp;quot;this or that&amp;quot; like &amp;quot;string or integer&amp;quot;, this is what's called a &lt;strong&gt;type union.&lt;/strong&gt; The GraphQL spec supports type unions for objects but &lt;a href="https://github.com/facebook/graphql/issues/215"&gt;it doesn't yet support scalar type unions&lt;/a&gt; (since 2016).&lt;/p&gt;
&lt;p&gt;This is unfortunate and since scalar type unions are not yet supported, here's an approach that works well with my preferred GraphQL server, &lt;a href="https://www.apollographql.com/"&gt;Apollo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="describing-generic-values"&gt;Describing Generic Values&lt;/h2&gt;
&lt;p&gt;In my scenario, we have multiple typeahead search fields that fetch values and pass them through our application untouched. There are half a dozen backend APIs that handle different kinds of data to search from and we use GraphQL to provide a consistent querying experience for the UI. Specifically, the raw &lt;code&gt;value&lt;/code&gt; represented by these APIs can be literally anything--we have no idea what it could be and also, &lt;strong&gt;we don't care.&lt;/strong&gt; This is key: the UI just passes this value through and eventually it gets saved back to these APIs, so we don't touch it.&lt;/p&gt;
&lt;p&gt;The schema of this scenario looks something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query search($text: String!, $start: Int!, $resourceId: String!): Options

type Options {
  total: Int!
  start: Int!
  page_size: Int!
  options: [Option]!
}

type Option {
  display_value: String!
  value: ???
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine a dropdown where the &lt;code&gt;display_value&lt;/code&gt; is what's shown to the user and &lt;code&gt;value&lt;/code&gt; is the backing data of the option. The user never sees it, it gets stored in state somewhere, and eventually when the user saves it gets passed back up.&lt;/p&gt;
&lt;p&gt;Now, since we use TypeScript in the UI, I can easily describe the &lt;code&gt;value&lt;/code&gt; property like this on the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;interface Option {
  display_value: string;
  value: any;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To tie this back to unions, if I had more concrete information about what values get returned by these APIs, I could be more specific using a &lt;strong&gt;type union&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;interface Option {
  display_value: string;
  value: string | number | boolean;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the GraphQL side to describe the &lt;code&gt;Option.value&lt;/code&gt; property, what would be &lt;strong&gt;ideal&lt;/strong&gt; is to do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Option {
  display_value: String!
  value: String | Int | Boolean
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or even:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Option {
  display_value: String!
  value: Any
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, neither of these type annotations are possible with the default GraphQL language specification. Many folks give up and just use &lt;code&gt;String&lt;/code&gt; but that actually causes bugs with our scenario (numbers get converted to strings and so on) so we need to blaze our own trail.&lt;/p&gt;
&lt;h2 id="custom-scalar-types"&gt;Custom Scalar Types&lt;/h2&gt;
&lt;p&gt;In Apollo and I assume most GraphQL implementations, &lt;a href="https://www.apollographql.com/docs/apollo-server/v2/features/scalars-enums.html"&gt;you can define your own custom scalar types&lt;/a&gt;. A scalar type is just a primitive type meaning it has no additional properties like a regular &amp;quot;object&amp;quot; would in GraphQL. One custom scalar we use often is the &lt;a href="https://github.com/taion/graphql-type-json"&gt;JSON scalar type&lt;/a&gt; for generic payloads but this doesn't work with primitive types like we need here.&lt;/p&gt;
&lt;p&gt;What we need to do is define our own custom type that can resolve our value. In my case, I need an &lt;code&gt;Any&lt;/code&gt; type that really just passes the value through. This is &lt;em&gt;frowned upon&lt;/em&gt; in the GraphQL world because everything &lt;em&gt;should&lt;/em&gt; be able to be described statically. I agree with the philosophy but I'm also pragmatic and the real world always has exceptions to these guidelines. So let's make it work.&lt;/p&gt;
&lt;p&gt;In your GraphQL schema, define your new scalar type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Any

type Option {
  display_value: String!
  value: Any
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we've declared a new type, so we need to implement it using what's called a &lt;a href="https://www.apollographql.com/docs/apollo-server/v2/features/scalars-enums.html#graphqlscalartype"&gt;type resolver&lt;/a&gt;. The implementation for our &lt;code&gt;Any&lt;/code&gt; type is dead simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// resolvers.js
import { GraphQLScalarType } from &amp;quot;graphql&amp;quot;;

export default {
  Query: {
    search() {
      return ...
    }
  },
  Any: new GraphQLScalarType({
    name: &amp;quot;Any&amp;quot;,
    description: &amp;quot;Literally anything&amp;quot;,
    serialize(value) {
      return value;
    },
    parseValue(value) {
      return value;
    },
    parseLiteral(ast) {
      return ast.value;
    }
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;ast.value&lt;/code&gt; is always a string but I haven't seen a case in consuming a GQL API where &lt;code&gt;parseLiteral&lt;/code&gt; comes into play--it may with the Introspection API. For our purposes, &lt;code&gt;serialize&lt;/code&gt; and &lt;code&gt;parseValue&lt;/code&gt; are the most important.&lt;/p&gt;
&lt;p&gt;That's it! You can now pass any value for &lt;code&gt;value&lt;/code&gt; and Apollo will happily consume or return it. For context I'm showing it next to the query resolver.&lt;/p&gt;
&lt;h2 id="custom-type-union-resolver"&gt;Custom Type Union Resolver&lt;/h2&gt;
&lt;p&gt;Great! Now, can you imagine what this would look like if we needed to support a type union? We need to implement the three methods appropriately for the union. Let's make a &lt;code&gt;StringOrInt&lt;/code&gt; type and resolver:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type StringOrInt

type Option {
  display_value: String!
  value: StringOrInt
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// resolvers.js
import { GraphQLScalarType, Kind } from &amp;quot;graphql&amp;quot;;

export default {
  Query: {
    search() {
      return ...
    }
  },
  StringOrInt: new GraphQLScalarType({
    name: &amp;quot;StringOrInt&amp;quot;,
    description: &amp;quot;A String or an Int union type&amp;quot;,
    serialize(value) {
      if (typeof value !== &amp;quot;string&amp;quot; &amp;amp;&amp;amp; typeof value !== &amp;quot;number&amp;quot;) {
        throw new Error(&amp;quot;Value must be either a String or an Int&amp;quot;);
      }

      if (typeof value === &amp;quot;number&amp;quot; &amp;amp;&amp;amp; !Number.isInteger(value)) {
        throw new Error(&amp;quot;Number value must be an Int&amp;quot;);
      }

      return value;
    },
    parseValue(value) {
      if (typeof value !== &amp;quot;string&amp;quot; &amp;amp;&amp;amp; typeof value !== &amp;quot;number&amp;quot;) {
        throw new Error(&amp;quot;Value must be either a String or an Int&amp;quot;);
      }
      
      if (typeof value === &amp;quot;number&amp;quot; &amp;amp;&amp;amp; !Number.isInteger(value)) {
        throw new Error(&amp;quot;Number value must be an Int&amp;quot;);
      }

      return value;
    },
    parseLiteral(ast) {

      // Kinds: http://facebook.github.io/graphql/June2018/#sec-Type-Kinds
      // ast.value is always a string
      switch (ast.kind) {
        case Kind.INT: return parseInt(ast.value, 10);
        case Kind.STRING: return ast.value;
        default:
          throw new Error(&amp;quot;Value must be either a String or an Int&amp;quot;);
      }
    }
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This supports either a &lt;code&gt;String&lt;/code&gt; or an &lt;code&gt;Int&lt;/code&gt; scalar type union. There could be more validation cases you need to handle, I'll let you explore that. You can reference the &lt;a href="http://facebook.github.io/graphql/June2018/#sec-Type-Kinds"&gt;spec&lt;/a&gt; on what kinds of tokens there are to parse.&lt;/p&gt;
&lt;p&gt;The downside with this approach is that you'll need to define a resolver for each kind of type union but that's better than having no option at all.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>That's a Wrap for NDC Minnesota</title>
			<link>https://kamranicus.com/posts/2018-05-11-ndc-minnesota-typescript-react</link>
			<description>&lt;p&gt;I gave my &lt;a href="https://ndcminnesota.com/talk/building-scalable-maintainable-apps-using-typescript-and-react/"&gt;Building Scalable, Maintainable Apps with TypeScript &amp;amp; React&lt;/a&gt; talk at NDC this last week and it was a blast. Had some really great conversations afterwards and feedback was positive, which is what any speaker can hope for.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-05-11-ndc-minnesota-typescript-react</guid>
			<pubDate>Fri, 11 May 2018 12:45:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I gave my &lt;a href="https://ndcminnesota.com/talk/building-scalable-maintainable-apps-using-typescript-and-react/"&gt;Building Scalable, Maintainable Apps with TypeScript &amp;amp; React&lt;/a&gt; talk at NDC this last week and it was a blast. Had some really great conversations afterwards and feedback was positive, which is what any speaker can hope for.&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/271363697" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/271363697"&gt;Building Scalable, Maintainable Apps Using TypeScript and React - Kamran Ayub&lt;/a&gt; from &lt;a href="https://vimeo.com/ndcconferences"&gt;NDC Conferences&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Wish I could have stayed and come! Loved your talk about react/typescript.&lt;/p&gt;&amp;mdash; Phill Stewart (&amp;#64;HeWhoFreeks) &lt;a href="https://twitter.com/HeWhoFreeks/status/994710519364931584?ref_src=twsrc%5Etfw"&gt;May 10, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Thanks Phill! This kind of feedback makes all the stress, planning, and nerve-wracking-ness about giving talks totally worth it. I guarantee every small bit of praise you give to a speaker, online or in-person, is very much appreciated.&lt;/p&gt;
&lt;p&gt;I'm always a little cautious before this talk since it assumes some prior knowledge of TypeScript or React but I had folks come up to me and even though they hadn't had as much experience, it sparked them to learn more--which is &lt;em&gt;also&lt;/em&gt; what any speaker can hope for. Value can be provided to any skill level I think, whether it's from &amp;quot;Should I even learn this? Will it help me?&amp;quot; to &amp;quot;I've done this for a year but I haven't seen that pattern before,&amp;quot; which was my goal.&lt;/p&gt;
&lt;p&gt;Back when I proposed my first course for Pluralsight I had pitched a TypeScript and React course but it was turned down since the curriculum has a lot of React and TypeScript courses &lt;em&gt;separately&lt;/em&gt;. I may still pitch it again because &lt;a href="https://app.pluralsight.com/library/search?q=react+typescript"&gt;there's still no one course that ties them together&lt;/a&gt; (or with Flow, for that matter). I had a good conversation with a gentleman about how there's not &lt;em&gt;that&lt;/em&gt; many resources out there on specifically patterns around TS and React, a primary motivation for this talk. There's certainly enough content for a 2-3 hour course and there's a specific course pattern called a &lt;a href="https://app.pluralsight.com/library/courses/electron-playbook/table-of-contents"&gt;playbook&lt;/a&gt; that this may fit.&lt;/p&gt;
&lt;p&gt;Another person I spoke to suggested I pitch the talk to JSMN and speaking at meetups is &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year"&gt;on my 2018 goals list&lt;/a&gt; so &lt;strong&gt;of course&lt;/strong&gt; I will do that. They also let me know about the &lt;a href="https://www.midwestgamingclassic.com/"&gt;Midwest Gaming Classic&lt;/a&gt; which would be cool to bring some &lt;a href="http://excaliburjs.com"&gt;Excalibur&lt;/a&gt; talks to or just attend in general.&lt;/p&gt;
&lt;p&gt;By the way, a friendly reminder I'll be talking about Node.js bots &lt;a href="https://www.meetup.com/Minneapolis-Azure-Cloud-Computing-Meetup/events/kdbbdpyxmbjb/"&gt;at the Minneapolis Azure meetup&lt;/a&gt; in September!&lt;/p&gt;
&lt;p&gt;There were so many other great talks I went to, I will post a follow-up soon hopefully with links to the recordings if they're out by then.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Follow-Up to .NET Rocks episode on RavenDB</title>
			<link>https://kamranicus.com/posts/2018-05-01-dotnetrocks-ravendb-podcast</link>
			<description>&lt;p&gt;At the end of April I got the opportunity to record a show with .NET celebs Carl Franklin and Richard Campbell, hosts of the &lt;a href="http://dotnetrocks.com"&gt;.NET Rocks&lt;/a&gt; podcast. It's &lt;a href="https://dotnetrocks.com/?show=1541"&gt;live now&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-05-01-dotnetrocks-ravendb-podcast</guid>
			<pubDate>Tue, 01 May 2018 11:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;At the end of April I got the opportunity to record a show with .NET celebs Carl Franklin and Richard Campbell, hosts of the &lt;a href="http://dotnetrocks.com"&gt;.NET Rocks&lt;/a&gt; podcast. It's &lt;a href="https://dotnetrocks.com/?show=1541"&gt;live now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tweeted about it afterwards:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;There really isn&amp;#39;t anything more surreal than being on a podcast you&amp;#39;ve listened to almost your entire career and then having to try to make sense and articulate your thoughts on said podcast. MAN, what a ride. 😆&lt;/p&gt;&amp;mdash; Kamran Ayub (&amp;#64;kamranayub) &lt;a href="https://twitter.com/kamranayub/status/989605608541376513?ref_src=twsrc%5Etfw"&gt;April 26, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;It was fun and surreal for sure but also nerve-wracking--it was my first podcast appearance!&lt;/p&gt;
&lt;h2 id="how-it-came-about"&gt;How it came about&lt;/h2&gt;
&lt;p&gt;A few months ago I emailed Carl and Richard about interest in doing an episode on RavenDB 4, this was right after I &lt;a href="https://kamranicus.com/posts/2018-02-08-ravendb-4-course-live"&gt;published my course&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I asked them if they'd have any appetite for a Raven 4 episode, that I just finished a course on it, and I've been a user since the 2.5 days. I suggested they could get Ayende or someone from the team on but that I'd be open to it, too. I didn't &lt;em&gt;really&lt;/em&gt; expect to be invited, after all...&lt;/p&gt;
&lt;p&gt;After I sent it, I didn't think about it much. Then, a week ago, Richard emails back and says they'd like to do an episode with someone who's been a user, which means they invited me!&lt;/p&gt;
&lt;p&gt;At this point, I'm honestly freaking out a little. Me? On .NET Rocks? Oh yes! Oh no. Oh man.&lt;/p&gt;
&lt;p&gt;We recorded the episode a few days later and you &lt;a href="https://dotnetrocks.com/?show=1541"&gt;can listen now&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="hindsight-is-2020"&gt;Hindsight is 20/20&lt;/h2&gt;
&lt;p&gt;By far my least favorite thing about speaking in public, or really speaking in general, is the analyzing that happens inevitably afterwards. Even when you know a subject, in the moment it can be tough to bring forward everything you've learned. I'm sure it gets better with practice.&lt;/p&gt;
&lt;p&gt;But you &lt;em&gt;can&lt;/em&gt; follow-up with those things you missed. So I wanted to provide some thoughts and append to my answers on the show.&lt;/p&gt;
&lt;h2 id="raven-4-performance"&gt;Raven 4 Performance&lt;/h2&gt;
&lt;p&gt;On the show I was asked about performance and I offered that in some testing I did, I saw time to rebuild a full index go from 60 seconds in 3.5 to just only 3 seconds in Raven 4. That blew my mind.&lt;/p&gt;
&lt;p&gt;I mentioned that I was seeing similar query times but that the &amp;quot;warm up&amp;quot; time on 3.5 was much larger. Here's some query performance tests I ran:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Query                             Raven 3.5.4     Raven 4.0.3
---                               ---             ---
Get game by name (skyrim)         0ms (126ms)     1ms (20ms)
Get game by name (mario)          2ms (716ms)     1ms    
Get game by search (search)       32ms (470ms)    1ms
Get game by genre (Array)         1ms (635ms)     1ms
Indexing 45,000 entries           60 seconds      3 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All times are for query duration (i.e. no network latency).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The times in parenthesis are &amp;quot;warm up&amp;quot; (first query) times. You can see for the Raven 4 tests, there was little to zero measurable warm up time.&lt;/li&gt;
&lt;li&gt;The first test showcases response time when there's only one game.&lt;/li&gt;
&lt;li&gt;The second has multiple results&lt;/li&gt;
&lt;li&gt;The third is a &amp;quot;search&amp;quot; operation which is a Lucene search&lt;/li&gt;
&lt;li&gt;The fourth test is searching an array property for an exact match&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other observations I saw:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network latency locally was about 7ms in 4.0. Measured in Chrome dev tools within the Studio.&lt;/li&gt;
&lt;li&gt;Querying while another index was rebuilding in 3.5 added significant overhead to all queries above (400-700ms). It had no visible impact on Raven 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So from what I can gather on a limited set of tests is that Raven 4 is indeed &lt;em&gt;very fast&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="memory-usage"&gt;Memory usage&lt;/h2&gt;
&lt;p&gt;The guys asked me a good question: what is the memory performance of Raven 4 compared to its predecessors? I didn't have any hard data but I offered the anecdote that my current VM host only has 4GB of RAM and runs the website alongside the DB. This is a poor model for redundancy but I'm penny pinching until I move to .NET Core on Linux. Anyway, Raven 3.5 runs okay on low-end hardware and I expected Raven 4 to be even better.&lt;/p&gt;
&lt;p&gt;After the show I just did some simple checks. Turns out, Raven 4 &lt;strong&gt;is&lt;/strong&gt; better.&lt;/p&gt;
&lt;p&gt;The following numbers are sitting idle after having done several queries and tests mentioned above. Both have just have a dev version of my [Keep Track of My Games][http://ktomg.com] database running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Raven Version      Commit       Working Set
3.5.4              1.035GB      90MB
4.0.3              607MB        260MB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So at a glance it looks like Raven 4 is better at managing physical memory (Commit) than 3.5.4 is. To do that it looks like it has a higher working set. Even totaled, 4.0 still allocates 22% less. For someone like me who wants to make the most out of a small cloud VM, this is good.&lt;/p&gt;
&lt;h2 id="on-raven-vs.mongo"&gt;On Raven vs. Mongo&lt;/h2&gt;
&lt;p&gt;I prepped for the show and in doing so I tried to study up on Mongo a bit. Like I said in the show, I'm definitely not an expert in it nor do I use it extensively. I've written some queries against it, modified documents, and that's about it!&lt;/p&gt;
&lt;p&gt;It's easy for this question to turn into a war, people have strong opinions. I haven't had an opportunity to use Mongo much in practice. We use it for our app at work; it's used for some configuration, user sessions, and preferences. It works really well. I don't even think we have any indexes, it was designed before I joined the team.&lt;/p&gt;
&lt;p&gt;Since I came from a .NET background, I tried Raven first and it met my needs. Raven 4 really has been impressing me as I use it more. When choosing between technologies I find it's best to just try each technology to see if it fits your use case. Ask yourself what you value most and measure that when testing.&lt;/p&gt;
&lt;h2 id="challenges-moving-to-a-document-database"&gt;Challenges moving to a document database&lt;/h2&gt;
&lt;p&gt;On the show I talked about a couple challenges people might have when moving from a relational to document-based database--document modeling and indexes. Those are both real challenges but I was wracking my brain to think of more.&lt;/p&gt;
&lt;p&gt;After the recording I immediately realized there was a lot more to this I should have mentioned (dumb brain!). I think one thing I struggled with a lot when starting out with Raven was just patterns and practices. How do I do this one thing I used to do with EF?&lt;/p&gt;
&lt;p&gt;One example I go over in &lt;a href="https://kamranicus.com/posts/2018-02-08-ravendb-4-course-live"&gt;my course&lt;/a&gt; is unique constraints. In EF, you'd just issue a query asking if an entity with a property equal to some value exists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;context.DbSet&amp;lt;User&amp;gt;().Any(u =&amp;gt; u.Username == &amp;quot;kamranicus&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, all set. When I moved to Raven, I didn't understand the total implications at first about indexing and eventual consistency. This type of query in Raven &lt;strong&gt;is&lt;/strong&gt; possible, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;session.Query&amp;lt;User&amp;gt;(x =&amp;gt; x.WaitForNonStaleResults())
  .Any(u =&amp;gt; u.Username == &amp;quot;kamranicus&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that from the beginning the guidance is to avoid &lt;code&gt;WaitForNonStaleResults()&lt;/code&gt; at all costs since it has performance implications (see my course, I explain it). Well, if you &lt;em&gt;don't&lt;/em&gt; do it, then your query isn't guaranteed to bring back up-to-date results (i.e. eventually consistent) and you will not get the result you expect.&lt;/p&gt;
&lt;p&gt;Instead, you have to lean on the fact that document operations are ACID-compliant and hack your brain to think of unique constraints as &lt;em&gt;actual documents.&lt;/em&gt; This is what the &lt;a href="https://ravendb.net/docs/article-page/3.5/Csharp/server/bundles/unique-constraints"&gt;unique constraints bundle&lt;/a&gt; was for in Raven 3.5 and below. Now in Raven 4, you'd use an &lt;a href="https://ayende.com/blog/180067/ravendb-4-0-interlocked-distributed-operations"&gt;interlocked distributed operation&lt;/a&gt;, which I've yet to try in practice.&lt;/p&gt;
&lt;p&gt;I'm hoping to address more of these patterns/practices in a follow-up course.&lt;/p&gt;
&lt;h2 id="enjoy-the-show"&gt;Enjoy the show&lt;/h2&gt;
&lt;p&gt;Like I said in that tweet, it was completely surreal to be on the show. I'm still in shock I think and I'm not sure what to expect for response. If you listened, hopefully you learned something new. By next winter, I'll get that snow blower.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Frontend Masters: Advanced React Patterns Workshop</title>
			<link>https://kamranicus.com/posts/2018-04-29-advanced-react-patterns-workshop</link>
			<description>&lt;p&gt;A couple weeks ago I went to the in-person Frontend Masters workshop with Kent C. Dodds on Advanced React Patterns.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-04-29-advanced-react-patterns-workshop</guid>
			<pubDate>Mon, 30 Apr 2018 01:18:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;A couple weeks ago I went to the in-person Frontend Masters workshop with Kent C. Dodds on Advanced React Patterns.&lt;/p&gt;
&lt;p&gt;I was looking forward to it, I've followed Kent for awhile and knew his workshops were well-received. I'm doing React at work and it was perfect timing for our project.&lt;/p&gt;
&lt;h2 id="takeaways"&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;The gist of the workshop was state management and props passing patterns in React, to be able to build smarter, flexible components.&lt;/p&gt;
&lt;p&gt;We centered around a toggle component that showcased each of the patterns, some isolated and some working in tandem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hadn't really been exposed to the context API before React 16.3 so this was brand new to me. They really have made it much easier to use now.&lt;/p&gt;
&lt;p&gt;The Context API makes it straightforward to pass data around throughout your app without forcing you to pass props down through the component tree (called &amp;quot;props drilling&amp;quot;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Render Props&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This pattern has come into fashion pretty recently I'd say. When I started learning React over a year ago I hadn't seen this pattern used much. Before attending the workshop I had used this pattern in practice in KTOMG to build analytics/social sharing providers that encapsulated some behavior like respecting Do Not Track across the site.&lt;/p&gt;
&lt;p&gt;The pattern is useful for building flexible UI components where you can encapsulate behavior and state but delegate rendering (or parts of rendering) to the consumer.&lt;/p&gt;
&lt;p&gt;Render props is powerful and in a lot of cases provides most of what you'd need in a flexible component.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Control Props&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a pattern to delegate the setting of state to &amp;quot;control props.&amp;quot; This provides flexibility to a component to delegate control of its state to a consuming component vs. setting internal state only.&lt;/p&gt;
&lt;p&gt;Whenever the component is intending to use &lt;code&gt;setState&lt;/code&gt;, it checks whether that state is &lt;em&gt;controlled&lt;/em&gt; (meaning, it's being passed in as a prop). If it is, it just calls a callback with what &lt;em&gt;would&lt;/em&gt; be the new state value. If it's not controlled, it goes ahead and sets state normally.&lt;/p&gt;
&lt;p&gt;This is useful in situations where you as the caller want to control the state yourself--it means though that you basically have to know how the internal state works of the component you're controlling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State Reducer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a more advanced pattern Kent showed. The goal of this is to enable a consuming component to manipulate the internal state of a component by basically intercepting state changes.&lt;/p&gt;
&lt;p&gt;It's a more flexible version of control props basically allowing your entire state to be controlled by a consumer.&lt;/p&gt;
&lt;p&gt;There's an &lt;a href="https://github.com/kentcdodds/advanced-react-patterns-v2/blob/master/src/why/state-reducer.js"&gt;example in the workshop repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="rendux-exercise"&gt;Rendux Exercise&lt;/h2&gt;
&lt;p&gt;I missed the last couple exercises going over Higher Order Components (HOCs) and this last exercise called &lt;a href="https://github.com/kentcdodds/advanced-react-patterns-v2/blob/master/src/exercises-final/13.js"&gt;Rendux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Rendux exercise uses the render props pattern to hook into a Redux store as a reusable component. Any time you need to access the store, you can use the &lt;code&gt;Rendux.Consumer&lt;/code&gt; component or &lt;code&gt;withRendux&lt;/code&gt; enhancer function. This is a different way to accomplish the similar Redux experience of using &lt;code&gt;Provider&lt;/code&gt; and the &lt;code&gt;connect&lt;/code&gt; enhancer.&lt;/p&gt;
&lt;h2 id="putting-into-practice"&gt;Putting into practice&lt;/h2&gt;
&lt;p&gt;The goal of the workshop was to learn each of these patterns on a small scale so we can apply them to our larger projects. There is certainly already opportunities on my project at work to leverage what I learned--I'm hoping to spend some more time building out our project and then writing about some useful patterns.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Finished My First Workshop at MinneWebCon</title>
			<link>https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon</link>
			<description>&lt;p&gt;Last week I had the opportunity to &lt;a href="https://kamranicus.com/posts/2017-12-18-workshop-bots-javascript-node-minnewebcon"&gt;give a half-day workshop&lt;/a&gt; at MinneWebCon. I had initially submitted the session as a 50 minute talk but the committee thought it would be better as a workshop.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon</guid>
			<pubDate>Mon, 30 Apr 2018 00:56:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Last week I had the opportunity to &lt;a href="https://kamranicus.com/posts/2017-12-18-workshop-bots-javascript-node-minnewebcon"&gt;give a half-day workshop&lt;/a&gt; at MinneWebCon. I had initially submitted the session as a 50 minute talk but the committee thought it would be better as a workshop.&lt;/p&gt;
&lt;p&gt;The workshop outline and code is &lt;a href="https://github.com/kamranayub/workshop-nodejs-azure-bots"&gt;available on GitHub&lt;/a&gt;. I thought I'd write up a brief retrospective since it was my first workshop!&lt;/p&gt;
&lt;h2 id="what-went-well"&gt;What went well&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Everyone was able to deploy a live bot and finished the workshop (huzzah!)&lt;/li&gt;
&lt;li&gt;I was able to help answer some questions I hadn't anticipated&lt;/li&gt;
&lt;li&gt;People paired up if they didn't have everything they needed on their computers&lt;/li&gt;
&lt;li&gt;Azure Bot Service works pretty well and even when a couple people accidentally chose the wrong code template, they were able to redo the bot in a few minutes&lt;/li&gt;
&lt;li&gt;People said they liked it, which always feels good!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-could-change"&gt;What could change&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If it was a longer workshop, I'd rather build a custom sample bot rather than building off the pre-built Notes domain&lt;/li&gt;
&lt;li&gt;I walked through some of the LUIS grammar via whiteboard but it would have been better to visualize the relationships better in slide form I think&lt;/li&gt;
&lt;li&gt;At the end some folks wanted to see what a &amp;quot;real&amp;quot; bot looks like hooked up to real data. I showed what I did for &lt;a href="http://ktomg.com"&gt;KTOMG&lt;/a&gt; but ideally in a full workshop we'd use a live data source as you would in the real world.&lt;/li&gt;
&lt;li&gt;The Azure Bot Service &amp;quot;web chat&amp;quot; blade was super finicky--it usually required people to sign out fully and sign back in to boot up the interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-i-learned"&gt;What I learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I learned I enjoy giving workshops. Helping people accomplish something in a hands-on way is pretty cool.&lt;/li&gt;
&lt;li&gt;Different people are on different levels and want different things out of the workshop. It was good I had some stretch goals.&lt;/li&gt;
&lt;li&gt;Professionals want a way to see how what they learned will apply to their day-to-day work. I'd flesh this out more if I gave the workshop again. Showing how I wrote my bot in C# for &lt;a href="http://ktomg.com"&gt;KTOMG&lt;/a&gt; was helpful I think.&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>Ludum Dare 41 Post-Mortem</title>
			<link>https://kamranicus.com/posts/2018-04-29-ludum-dare-41-post-mortem</link>
			<description>&lt;p&gt;Whoo! Another year, another opportunity to participate in Ludum Dare with the &lt;a href="http://excaliburjs.com"&gt;Excalibur.js&lt;/a&gt; team. Last jam we made &lt;a href="https://blog.excaliburjs.com/post/161334104662/ludum-dare-38-postmortem"&gt;I Just Wanted Groceries&lt;/a&gt; (which I totally spaced on writing about). You can play our LD41 game &lt;a href="http://excaliburjs.com/ludum-41"&gt;Office Daydream&lt;/a&gt; right now.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-04-29-ludum-dare-41-post-mortem</guid>
			<pubDate>Sun, 29 Apr 2018 13:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Whoo! Another year, another opportunity to participate in Ludum Dare with the &lt;a href="http://excaliburjs.com"&gt;Excalibur.js&lt;/a&gt; team. Last jam we made &lt;a href="https://blog.excaliburjs.com/post/161334104662/ludum-dare-38-postmortem"&gt;I Just Wanted Groceries&lt;/a&gt; (which I totally spaced on writing about). You can play our LD41 game &lt;a href="http://excaliburjs.com/ludum-41"&gt;Office Daydream&lt;/a&gt; right now.&lt;/p&gt;
&lt;h2 id="the-jam"&gt;The jam&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://ldjam.com"&gt;Ludum Dare&lt;/a&gt; is a global game jam that has two modes: the Compo and the Jam. The Compo is for individuals and strict rules on content creation, limited to 48 hours. The Jam is for teams and is a bit looser on content rules (you can use premade assets) and lasts 72 hours. Since we are a team, we always do the jam but it's always interested me to try doing a Compo by myself at some point.&lt;/p&gt;
&lt;h2 id="the-theme"&gt;The theme&lt;/h2&gt;
&lt;p&gt;The theme this jam was not as great as we hoped--there were certainly some better ones in the running but it was a challenge and we made the most of it. The theme was &amp;quot;Combine 2 incompatible genres.&amp;quot;&lt;/p&gt;
&lt;p&gt;First, we didn't like the term &amp;quot;incompatible&amp;quot; because that already presupposes the two genres you choose can't have been considered compatible today and that they would never be compatible in the future. But that's nonsense because I'd DEFINITELY play &lt;a href="https://ldjam.com/events/ludum-dare/41/jeff-from-accounting"&gt;this typing FPS&lt;/a&gt; for realsies if it ever made it into a production game.&lt;/p&gt;
&lt;p&gt;Second, we like open-ended themes more than specifically scoped themes. For example, previous ones we participated in included &amp;quot;Under the Sea&amp;quot;, &amp;quot;A Small World&amp;quot;, and &amp;quot;Shapeshift.&amp;quot; These all leave much more open interpretations.&lt;/p&gt;
&lt;p&gt;Still. The theme forced people to come up with some interesting combinations like this basketball + Connect 4 game. Constraints breed creativity, even if there were some really effing weird ones.&lt;/p&gt;
&lt;h2 id="brainstorming"&gt;Brainstorming&lt;/h2&gt;
&lt;p&gt;We played with a lot of combinations. We started by listing game genres, then movie genres, then music genres. Some we combos we liked but knew we didn't have time for, mainly RPG-based or turn-based.&lt;/p&gt;
&lt;p&gt;It kept coming back to a runner + idle game theme. The dichotomies of a fast-paced runner with a casual idle game was attractive. They were incompatible in terms of mechanics and style. We didn't want to &amp;quot;mix&amp;quot; two genres, we really wanted to have a distinct separation between the genres.&lt;/p&gt;
&lt;p&gt;We landed on either a librarian dreaming of things she read in the books she was putting away or a bored office worker. The office theme was strong and we didn't have enough time to build out a full themed set of art for different book genres.&lt;/p&gt;
&lt;p&gt;And so, Office Daydream was born. You were just a person doing menial office tasks dreaming of being a motorcycle stunt action hero.&lt;/p&gt;
&lt;h2 id="coding"&gt;Coding&lt;/h2&gt;
&lt;p&gt;This jam was different from previous jams because we were at our teammate's cabin and were essentially on vacation. My wife and son were there, other spouses were present. We knew we'd only be working 8 hour days to spend evenings with family.&lt;/p&gt;
&lt;p&gt;This turned out to work super well--and even when I had to leave halfway through on Sunday, the team managed to get everything done that we had scoped for. We ended up starting around 8-9am, taking an hour lunch break, and finishing around 5pm.&lt;/p&gt;
&lt;p&gt;Some things we did ahead of time that ensured we met this schedule:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spend Friday after theme announcement &lt;em&gt;just&lt;/em&gt; focusing on design and mechanics and idea generation to have a solid goal by the end of the night&lt;/li&gt;
&lt;li&gt;Scoped all mechanics/design to a minimal goal (MVP) with stretch goals&lt;/li&gt;
&lt;li&gt;Had all our tooling/setup in place beforehand so we could sit down and work immediately&lt;/li&gt;
&lt;li&gt;Used Trello like we have in the past to manage work&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="design"&gt;Design&lt;/h2&gt;
&lt;p&gt;We initially had thought you'd control the runner via keyboard and the office minigames with your mouse. But then we decided to use the mouse for all interaction because it forced you to focus on one thing at a time, making it harder.&lt;/p&gt;
&lt;p&gt;We also didn't really know what we'd do for an &amp;quot;endgame&amp;quot; until we realized the theme decided for us. You're in an office. You typically work an 8 hour day. So, each minigame will last essentially a portion of that time and when you finish them, you end your work day successfully daydreaming.&lt;/p&gt;
&lt;h2 id="assets"&gt;Assets&lt;/h2&gt;
&lt;p&gt;I spent a little time and made the background for the runner portion. I went with a cyberpunk-ish/Bladerunner cityscape theme. It worked pretty well! Just simple fixed width skyscrapers that could be randomly tiled horizontally to make the background more dynamic.&lt;/p&gt;
&lt;p&gt;I also found the motorcycle asset and designed the art for the paper collation minigame (the mug I did was replaced by Erik's better mug). I'm no artist and I'm very glad Erik took care of the rest of the art. If we need anyone else on the team, it's a dedicated artist.&lt;/p&gt;
&lt;h2 id="the-end"&gt;The end&lt;/h2&gt;
&lt;p&gt;Every game jam is a ton of fun and I always learn something new about game dev. It was nice not feeling the &amp;quot;crunch&amp;quot; of 12 hour days, I feel we might adopt the 8 hour cycle in future jams more often now that we know we can accomplish what we set out to build.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Elusive Bugs with GraphQL Object Caching in Apollo Client</title>
			<link>https://kamranicus.com/posts/2018-03-06-graphql-apollo-object-caching</link>
			<description>&lt;p&gt;We are deploying a major update to our internal application soon that uses the &lt;a href="https://www.apollographql.com/docs/react/index.html"&gt;Apollo client&lt;/a&gt; for GraphQL. It's pretty awesome even though there were &lt;a href="https://github.com/apollographql/apollo-client/pull/3102"&gt;a couple bugs&lt;/a&gt; I had to fix.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-03-06-graphql-apollo-object-caching</guid>
			<pubDate>Wed, 07 Mar 2018 14:21:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;We are deploying a major update to our internal application soon that uses the &lt;a href="https://www.apollographql.com/docs/react/index.html"&gt;Apollo client&lt;/a&gt; for GraphQL. It's pretty awesome even though there were &lt;a href="https://github.com/apollographql/apollo-client/pull/3102"&gt;a couple bugs&lt;/a&gt; I had to fix.&lt;/p&gt;
&lt;p&gt;During regression testing we ran into an issue involving the Apollo client that was subtle and caused &amp;quot;interesting&amp;quot; bugs. First, let's take a look at exactly how object caching works.&lt;/p&gt;
&lt;h2 id="caching-in-apollo-client"&gt;Caching in Apollo client&lt;/h2&gt;
&lt;p&gt;By default, caching in Apollo uses the &lt;a href="https://www.apollographql.com/docs/react/basics/caching.html"&gt;in-memory cache&lt;/a&gt;. The way Apollo determines if it should cache a GraphQL object is if the response contains an &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;_id&lt;/code&gt; property &lt;em&gt;and&lt;/em&gt; a &lt;code&gt;__typename&lt;/code&gt; property (which is added automatically by Apollo by default).&lt;/p&gt;
&lt;p&gt;So, for example, let's say we declared a &lt;code&gt;Product&lt;/code&gt; type in our GraphQL schema:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Product {
  sku: ID!
  title: String!
  quantity: Int!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The product has an identifier and it's stored in the SKU field.&lt;/p&gt;
&lt;p&gt;Then you issued a query like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  product(sku: &amp;quot;abc123&amp;quot;) {
    sku
    title
    quantity
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty straightforward--we want to grab the &lt;code&gt;sku&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, and &lt;code&gt;quantity&lt;/code&gt; for a product by SKU. The response when run through Apollo client will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;{
  data: {
    product: {
      sku: &amp;quot;abc123&amp;quot;,
      title: &amp;quot;My cool product&amp;quot;,
      quantity: 4,
      __typename: &amp;quot;Product&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, based on the rules above, do you think Apollo will cache the Product object by it's SKU? &lt;strong&gt;No.&lt;/strong&gt; Because there is no &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;_id&lt;/code&gt; property, only a &lt;code&gt;__typename&lt;/code&gt; property which isn't enough.&lt;/p&gt;
&lt;p&gt;We can fix this in a few ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change the schema&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;dataIdFromObject&lt;/code&gt; option in the &lt;a href="https://www.apollographql.com/docs/react/basics/caching.html#configuration"&gt;caching configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alias the SKU to be &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Alias SKU as &lt;code&gt;_id&lt;/code&gt; but still keep &lt;code&gt;sku&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don't like the first option because if &lt;code&gt;sku&lt;/code&gt; is the natural key in your domain, why change it?&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;dataIdFromObject&lt;/code&gt; is a great approach if you control the client configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { InMemoryCache, defaultDataIdFromObject } from 'apollo-cache-inmemory';

const cache = new InMemoryCache({
  dataIdFromObject: object =&amp;gt; {
    switch (object.__typename) {
      case 'Product': return object.sku; // use `sku` as the primary key
      default: return defaultDataIdFromObject(object); // fall back to default handling
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'd advise splitting this up into separate functions for each type and genericizing it but I leave that up to you.&lt;/p&gt;
&lt;p&gt;If you don't control the configuration, adding an alias still allow you to express what the natural ID is of your domain objects and pushes the concern of ID caching to the client.&lt;/p&gt;
&lt;p&gt;I prefer adding an additional &lt;code&gt;_id&lt;/code&gt; field because it allows our caller to still treat the response as it would be expected from the GraphQL documentation. It also helps more if you're statically typing responses. With that in mind, let's update our query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  product(sku: &amp;quot;abc123&amp;quot;) {
    sku
    title
    quantity
    _id: sku
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! We've added an alias for &lt;code&gt;_id&lt;/code&gt; so now GraphQL will respond with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;{
  data: {
    product: {
      sku: &amp;quot;abc123&amp;quot;,
      title: &amp;quot;My cool product&amp;quot;,
      quantity: 4,
      _id: &amp;quot;abc123&amp;quot;,
      __typename: &amp;quot;Product&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the condition is satisfied and Apollo will cache the &lt;code&gt;Product&lt;/code&gt; by this ID.&lt;/p&gt;
&lt;h2 id="non-idempotent-object-caching"&gt;Non-idempotent object caching&lt;/h2&gt;
&lt;p&gt;Using IDs is pretty standard when working with APIs and data. Real scenarios have more complex data and thus your GraphQL schema will probably start to get more involved. Since many entities in an application domain might have &lt;code&gt;id&lt;/code&gt; properties this feature of Apollo can also turn against you if you aren't careful.&lt;/p&gt;
&lt;p&gt;For example, let's say a product can come in multiple colors. On a per-product basis, you can mark a color as the primary color--meaning for example by default when shown on your website, you present that color first. But the names of colors are static and are on a per-color basis.&lt;/p&gt;
&lt;p&gt;The schema looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Color {
  id: Int!
  name: String!
  is_primary: Boolean!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The GraphQL query will look something like this if you're working with a standard &lt;code&gt;id&lt;/code&gt; convention:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  product(sku: &amp;quot;abc123&amp;quot;) {
    _id: sku
    sku
    title
    quantity
    colors {
      id
      is_primary
      name
    }    
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again this is pretty straightforward and nothing looks wrong on the surface. But it hides a subtle and nasty issue. When Apollo sends this query and the server will respond like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;{
  data: {
    product: {
      sku: &amp;quot;abc123&amp;quot;,
      title: &amp;quot;My cool product&amp;quot;,
      quantity: 4,
      colors: [
        { id: 1, name: &amp;quot;Red&amp;quot;, is_primary: true, __typename: &amp;quot;Color&amp;quot; },
        { id: 2, name: &amp;quot;Blue&amp;quot;, is_primary: false, __typename: &amp;quot;Color&amp;quot; }
      ],
      _id: &amp;quot;abc123&amp;quot;,
      __typename: &amp;quot;Product&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now think about the conditions in which Apollo will cache a &lt;code&gt;Color&lt;/code&gt; object. Do you see the problem? Let me showcase the problem by issuing multiple product queries that select primary colors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  products(skus: [&amp;quot;abc123&amp;quot;, &amp;quot;xyz890&amp;quot;]) {
    _id: sku
    sku
    title
    quantity
    colors {
      id
      is_primary
      name
    }    
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the raw GraphQL response looks like this for multiple products:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;{
  data: {
    products: [
      {
        sku: &amp;quot;abc123&amp;quot;,
        title: &amp;quot;My cool product&amp;quot;,
        quantity: 4,
        colors: [
          { id: 1, name: &amp;quot;Red&amp;quot;, is_primary: true, __typename: &amp;quot;Color&amp;quot; },
          { id: 2, name: &amp;quot;Blue&amp;quot;, is_primary: false, __typename: &amp;quot;Color&amp;quot; }
        ],
        _id: &amp;quot;abc123&amp;quot;,
        __typename: &amp;quot;Product&amp;quot;
      },
      {
        sku: &amp;quot;xyz890&amp;quot;,
        title: &amp;quot;Another cool product&amp;quot;,
        quantity: 0,
        colors: [
          { id: 1, name: &amp;quot;Red&amp;quot;, is_primary: false, __typename: &amp;quot;Color&amp;quot; },
          { id: 3, name: &amp;quot;Yellow&amp;quot;, is_primary: true, __typename: &amp;quot;Color&amp;quot; }
        ],
        _id: &amp;quot;xyz890&amp;quot;,
        __typename: &amp;quot;Product&amp;quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But when Apollo processes these query results, it tries to be smart and efficient by attempting to read objects from the cache. Guess what will happen as it processes this?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process &lt;code&gt;products[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cache product by ID &lt;code&gt;abc123&lt;/code&gt; for type &lt;code&gt;Product&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Process &lt;code&gt;products[0].colors[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cache color Red by ID &lt;code&gt;1&lt;/code&gt; for type &lt;code&gt;Color&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At step 4, we've cached the Red color by its ID, which means when Apollo moves to the next product...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process &lt;code&gt;products[1].colors[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Does color Red &lt;code&gt;1&lt;/code&gt; already exist in the cache? &lt;strong&gt;YES.&lt;/strong&gt; Reuse that object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's look at the &lt;strong&gt;actual&lt;/strong&gt; response Apollo gives us for this same query:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/37100190-f26e8792-21e7-11e8-9d8b-35c14db7eeca.png" class="img-fluid" alt="object-caching" /&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://codesandbox.io/s/24zx7k6z10"&gt;for yourself!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apollo &amp;quot;smartly&amp;quot; reuses the same object response for Red as before--which means when we read the Apollo query result, &lt;strong&gt;the second product ends up having no primary color.&lt;/strong&gt; OOPS.&lt;/p&gt;
&lt;h2 id="the-root-cause"&gt;The root cause&lt;/h2&gt;
&lt;p&gt;While this may seem like a bug, it's not really--it's just showcasing an issue with the way we are expressing our GraphQL types incorrectly. Apollo is making the assumption that an entity is idempotent across queries with the same ID. In our case, that's not true because different products may have different &lt;code&gt;is_primary&lt;/code&gt; values for the same color. Ideally, what we should be doing is putting all &lt;em&gt;product-specific&lt;/em&gt; information on the &lt;code&gt;Product&lt;/code&gt; type, not a nested type.&lt;/p&gt;
&lt;h2 id="workaround-or-fix-it"&gt;Workaround or fix it?&lt;/h2&gt;
&lt;p&gt;The right way to fix this is by changing our schema to add a new &lt;code&gt;primary_color&lt;/code&gt; field to the &lt;code&gt;Product&lt;/code&gt; type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Product {
  sku: ID!
  title: String!
  quantity: Int!
  colors: [Color]!
  primary_color: Color
}

type Color {
  id: Int!
  name: String!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now for any number of products, &lt;code&gt;Color&lt;/code&gt; can be safely cached no matter where it appears in a response.&lt;/p&gt;
&lt;p&gt;In some cases, like ours, doing the right thing is a large enough change that we can't do it right away without modifying a lot of client code (we could migrate slowly, by adding the new field and deprecating the old field). It's also just possible in a big company, you may not control the schema and have to wait for a fix from another team. There are some other workarounds you as a client can do.&lt;/p&gt;
&lt;h3 id="alias-the-id-as-something-else"&gt;Alias the ID as something else&lt;/h3&gt;
&lt;p&gt;The first workaround is to simply just use a different field name instead of &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  products(skus: [&amp;quot;abc123&amp;quot;, &amp;quot;xyz890&amp;quot;) {
    _id: sku
    sku
    title
    quantity
    colors {
      color_id: id
      is_primary
      name
    }    
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apollo's caching condition won't trigger for the &lt;code&gt;Color&lt;/code&gt; objects now (no &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;_id&lt;/code&gt; fields) and we're safe.&lt;/p&gt;
&lt;p&gt;This might seem like a good approach but the downside is that it would be easy for a future developer to mistakenly use &lt;code&gt;id&lt;/code&gt; in another query and not realize the mistake they're making.&lt;/p&gt;
&lt;h3 id="exclude-the_typename-field"&gt;Exclude the &lt;code&gt;__typename&lt;/code&gt; field&lt;/h3&gt;
&lt;p&gt;It might be better to just &lt;em&gt;explicitly&lt;/em&gt; exclude the &lt;code&gt;__typename&lt;/code&gt; field that Apollo adds by default. It turns out this is pretty easy and makes it very apparent we are doing something &amp;quot;weird&amp;quot; that should cause future developers to stop and ask why:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  products(skus: [&amp;quot;abc123&amp;quot;, &amp;quot;xyz890&amp;quot;]) {
    _id: sku
    sku
    title
    quantity
    colors {
      color_id: id
      is_primary
      name
      # Disable Apollo caching for this Color
      __typename &amp;#64;skip(if: true)
    }    
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the &lt;code&gt;&amp;#64;skip&lt;/code&gt; GraphQL directive, we can explictly denote we don't want to cache the response for this particular query result for &lt;code&gt;Color&lt;/code&gt;. We can even call it out with a comment to make it extra apparent.&lt;/p&gt;
&lt;h3 id="dont-add_typename-wholesale"&gt;Don't add &lt;code&gt;__typename&lt;/code&gt; wholesale&lt;/h3&gt;
&lt;p&gt;If you control your Apollo client caching, there is an option to &lt;a href="https://www.apollographql.com/docs/react/basics/caching.html#configuration"&gt;disable automatic addition&lt;/a&gt; of &lt;code&gt;__typename&lt;/code&gt; to queries for the in-memory caching using the &lt;code&gt;addTypename: false&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;If you wanted to disable caching wholesale, it's probably better to just use the &lt;code&gt;no-cache&lt;/code&gt; fetch policy which bypasses any calls to the underlying data store (which can be expensive for very large query batches/responses).&lt;/p&gt;
&lt;h2 id="caching-is-awesome-except-when-its-not"&gt;Caching is awesome except when its not&lt;/h2&gt;
&lt;p&gt;This &amp;quot;bug&amp;quot; took us awhile to figure out--but I remember reading the docs for Apollo caching and after I tested aliasing the fields, everything was suddenly working as expected, that's when it clicked more and I understood what was happening. I love GraphQL and the Apollo client is pretty awesome but issues like these can be frustrating! I hope this breakdown helps other GQL developers model their schema appropriately.&lt;/p&gt;
&lt;p&gt;The reference code is available on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apollo Launchpad: &lt;a href="https://launchpad.graphql.com/kqx178pn57"&gt;https://launchpad.graphql.com/kqx178pn57&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Codesandbox: &lt;a href="https://codesandbox.io/s/24zx7k6z10"&gt;https://codesandbox.io/s/24zx7k6z10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>RavenDB 4: Getting Started course is live!</title>
			<link>https://kamranicus.com/posts/2018-02-08-ravendb-4-course-live</link>
			<description>&lt;p&gt;It's here! &lt;a href="http://bit.ly/learnravendb4"&gt;Go and watch my new Pluralsight course&lt;/a&gt; now to learn about working with RavenDB 4! RavenDB is available for free, &lt;a href="https://ravendb.net/download"&gt;even for production use&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-02-08-ravendb-4-course-live</guid>
			<pubDate>Fri, 09 Feb 2018 01:04:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;It's here! &lt;a href="http://bit.ly/learnravendb4"&gt;Go and watch my new Pluralsight course&lt;/a&gt; now to learn about working with RavenDB 4! RavenDB is available for free, &lt;a href="https://ravendb.net/download"&gt;even for production use&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-youll-learn"&gt;What you'll learn&lt;/h2&gt;
&lt;p&gt;You can &lt;a href="https://app.pluralsight.com/player?name=8b3d5a8b-83e2-4b63-883a-906cac0f705c&amp;amp;mode=live&amp;amp;clip=0&amp;amp;course=ravendb-4-getting-started&amp;amp;author=kamran-ayub"&gt;watch the course overview for free&lt;/a&gt;, if you prefer.&lt;/p&gt;
&lt;p&gt;Otherwise, from the course page:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;RavenDB is a cross-platform NoSQL distributed document database designed for small to enterprise-level applications. In this course, RavenDB 4: Getting Started, you’ll learn how to leverage RavenDB in the context of .NET application development. First, you’ll learn what RavenDB brings to the table and what problems it will help solve. Next, you’ll see how to create, update, and query data with the .NET client SDK. Finally, you’ll discover how to manage Raven using the first-class &amp;quot;Studio&amp;quot; UI experience. When you’re finished with this course, you’ll have a foundational knowledge of Raven enabling you to use it in your next NoSQL-based application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The course is organized around a sample application (that is &lt;a href="https://github.com/kamranayub/pluralsight-ravendb-4-getting-started"&gt;publicly available&lt;/a&gt;) written in ASP.NET Core and C#. It's pretty simple, on purpose, to showcase the major features of Raven.&lt;/p&gt;
&lt;h2 id="creation-process"&gt;Creation process&lt;/h2&gt;
&lt;p&gt;This course is only around 2 hours compard to &lt;a href="https://www.packtpub.com/application-development/introduction-typescript-video"&gt;my TypeScript course&lt;/a&gt; which is a full 8 hours long but this time I decided to track my time more closely. The breakdown was roughly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Content&lt;/em&gt; (slides, research, etc.): 33 hours&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Planning&lt;/em&gt; (proposal, assessments, course wrap-up): 5 hours (?)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Recording&lt;/em&gt;: 13 hours&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Code&lt;/em&gt;: 24 hours&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Editing&lt;/em&gt;: 30 hours&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be fair, the last 3-4 weeks I did not end up tracking time so I estimated that based on previous hours, I spent around 100 hours of work. I started the course in mid-October so it was about 4 months of work. In that time, we had a two week trip in Hawaii and we also closed on a new house (in addition to normal fatherly duties for my then 10 month old)--hence I finished a month later than I had initially planned. The funny thing is, RavenDB 4 went stable the &lt;strong&gt;same day&lt;/strong&gt; the course went live! So the timing worked out great.&lt;/p&gt;
&lt;p&gt;As far as my workflow--I wrote all the code first for the course to fully understand what to teach and what would need to be covered. Then, I went one module at a time, working on content first then any code demos and then recording/editing. Even with all the code written, I still ended up moving some content around to make the flow more natural and introduce concepts in the right order.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What's next?&lt;/h2&gt;
&lt;p&gt;I plan to write a series of posts on Raven, maybe even do a few livestreams. Since I focused on the .NET SDK in the course I'd love to write a sample in Node, Go, and Python as well (these could be the subject of the livestreams). The course will be added to the official RavenDB site as a resource.&lt;/p&gt;
&lt;p&gt;As far as Pluralsight goes--I won't be starting a course immediately since I need to get the new house (and office!) in order and get ready for my &lt;a href="https://kamranicus.com/posts/2017-12-18-workshop-bots-javascript-node-minnewebcon"&gt;April workshop on Node.js Bots in Azure&lt;/a&gt; and May session on &lt;a href="https://kamranicus.com/posts/2018-01-31-ndc-minnesota-react-typescript-talk"&gt;TypeScript/React at NDC&lt;/a&gt;. I also need to propose the course and get it accepted! I would love a follow-up course to dive deeper into building with Raven as this course really only scratches the surface.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Scalable React &amp; TypeScript at NDC Minnesota</title>
			<link>https://kamranicus.com/posts/2018-01-31-ndc-minnesota-react-typescript-talk</link>
			<description>&lt;p&gt;&lt;img src="/assets/images/talks/ndc.jpg" class="img-fluid" alt="NDC Conferences"&gt;&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-01-31-ndc-minnesota-react-typescript-talk</guid>
			<pubDate>Thu, 01 Feb 2018 04:50:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/assets/images/talks/ndc.jpg" class="img-fluid" alt="NDC Conferences" /&gt;&lt;/p&gt;
&lt;p&gt;I'm having a tough time coming to terms with what I'm about to write--but I'm honored that my scalable React and TypeScript talk has been accepted for &lt;a href="http://ndcminnesota.com"&gt;NDC Minnesota&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ndcminnesota.com/page/about-ndc"&gt;NDC is a big deal&lt;/a&gt; and I will be sharing the spotlight with such ubiquitous experts like K. Scott Allen &amp;amp; Michelle Bustamante, both of whom are giving workshops I can't decide between, Steve Sanderson, Brock Allen, and &lt;em&gt;more&lt;/em&gt;. OK OK sure, it's not NDC London or NDC Sydney--but it's &lt;strong&gt;still&lt;/strong&gt; NDC and I &lt;strong&gt;still&lt;/strong&gt; can't believe I was accepted. This is also a huge personal milestone as this will be my first conference that isn't just local.&lt;/p&gt;
&lt;h2 id="about-the-talk"&gt;About the talk&lt;/h2&gt;
&lt;p&gt;If you don't really follow me and are wondering what the talk will be about, well, &lt;a href="https://youtu.be/owcuEwn-pSM"&gt;you can watch it online&lt;/a&gt; (spoiler alert!). But I promise it's going to be different and better, somehow. In fact, my React rewrite might &lt;em&gt;actually&lt;/em&gt; be done by then!&lt;/p&gt;
&lt;h2 id="i.am.terrified"&gt;I. am. terrified.&lt;/h2&gt;
&lt;p&gt;Followed closely behind my excitement is a looming wave of terror--as I will need to refine, revamp, and level up my talk for a bigger audience. I've done it twice (once at Midwest.js and once within Target) and now I pray the third time will be a homerun.&lt;/p&gt;
&lt;h2 id="is-starting-strong"&gt;2018 is starting strong&lt;/h2&gt;
&lt;p&gt;As far as &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year"&gt;my goals&lt;/a&gt; for the year go, I think I have a good start. I've &lt;a href="https://kamranicus.com/posts/2017-12-18-workshop-bots-javascript-node-minnewebcon"&gt;got a workshop&lt;/a&gt; lined up for May as well, &lt;a href="https://kamranicus.com/posts/2017-10-10-becoming-a-pluralsight-author"&gt;my Pluralsight course&lt;/a&gt; is almost ready, and now I'm speaking at NDC. I've also been nominated for a Microsoft MVP (oops, did I not mention that... shh, the two of you who read this keep it down). We also just bought a house. And it's only January.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>2017 Year in Review and 2018 Goals</title>
			<link>https://kamranicus.com/posts/2018-01-01-2018-a-new-year</link>
			<description>&lt;p&gt;It's good to have goals. Without goals, you're aimlessly wandering around on this space rock with nothing to do and no one to answer to. Some folks like that but I'm not one of them--I like having goals, for near and long-term. I have career goals that I work on with my manager, these are overall professional and community goals to help me personally grow.&lt;/p&gt;</description>
			<guid>https://kamranicus.com/posts/2018-01-01-2018-a-new-year</guid>
			<pubDate>Mon, 01 Jan 2018 14:50:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;It's good to have goals. Without goals, you're aimlessly wandering around on this space rock with nothing to do and no one to answer to. Some folks like that but I'm not one of them--I like having goals, for near and long-term. I have career goals that I work on with my manager, these are overall professional and community goals to help me personally grow.&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://kamranicus.com/posts/2017-01-02-year-in-review"&gt;got a lot done in 2016&lt;/a&gt; and continued the trend in 2017, let's break it down and end with my 2018 goals.&lt;/p&gt;
&lt;h1 id="year-in-review"&gt;2017 Year in Review&lt;/h1&gt;
&lt;h2 id="life"&gt;Life&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Achievement Unlocked: Father. My son was born in February!&lt;/li&gt;
&lt;li&gt;I &lt;a href="https://kamranicus.com/posts/2017-08-28-joined-target"&gt;started a new job&lt;/a&gt; at Target in August&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="publishing"&gt;Publishing&lt;/h2&gt;
&lt;p&gt;Some very exciting milestones were reached in 2017: my first course was published and I became a Pluralsight author!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I &lt;a href="https://kamranicus.com/posts/2017-01-31-introduction-to-typescript-course-packt-publishing"&gt;published my Introduction to TypeScript course&lt;/a&gt; on January 31&lt;/li&gt;
&lt;li&gt;In October, I &lt;a href="https://kamranicus.com/posts/2017-10-10-becoming-a-pluralsight-author"&gt;accepted a contract&lt;/a&gt; to author my first Pluralsight course on RavenDB 4! It's almost done so I will be an &amp;quot;official&amp;quot; author in 2018. This was a huge accomplishment!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="open-source"&gt;Open Source&lt;/h2&gt;
&lt;p&gt;Overall, I'm still finding time to contribute to open source. My number of contributions was lower than 2016 but this year I had a new baby so I figure that's pretty good!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/excaliburjs/Excalibur/pulls?page=1&amp;amp;q=is%3Apr+is%3Aclosed+author%3Akamranayub"&gt;34 PRs closed for Excalibur.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kamranayub?tab=overview&amp;amp;from=2017-12-01&amp;amp;to=2017-12-31"&gt;840 contributions in 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In April, worked on &amp;quot;&lt;a href="https://github.com/excaliburjs/ludum-38"&gt;I Just Wanted Groceries&lt;/a&gt;&amp;quot; for the Ludum Dare 38 game jam&lt;/li&gt;
&lt;li&gt;In October I &lt;a href="https://www.youtube.com/playlist?list=PL3ac-9HYUzQjbIWk7BczVfPqVD2_BNWhE"&gt;started streaming&lt;/a&gt; every other Thursday on Twitch, working on OSS projects. I did 4 sessions with 3 recorded videos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-tech"&gt;New Tech&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I got my first Raspberry Pi and &lt;a href="https://kamranicus.com/posts/2017-02-21-building-a-raspberry-pi-3-baby-monitor-livestream-audio-video"&gt;built a baby monitor&lt;/a&gt;. My guide continues to be my most popular article on my site!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kamranicus.com/posts/2017-10-27-frontend-masters-node-api-graphql"&gt;Played with GraphQL&lt;/a&gt; and continue working with GQL full-time at work (it's awesome)&lt;/li&gt;
&lt;li&gt;I'm using &amp;quot;older&amp;quot; AngularJS at work but &lt;a href="https://kamranicus.com/posts/2017-10-06-webpack-karma-jest-babel-angularjs"&gt;integrating it with modern tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kamranicus.com/posts/2017-11-20-node-chrome-headless-drone-image"&gt;Messing with Drone CI&lt;/a&gt; at work&lt;/li&gt;
&lt;li&gt;Did some &lt;a href="https://github.com/ansible/ansible/pulls/kamranayub"&gt;Ansible&lt;/a&gt; earlier in the year&lt;/li&gt;
&lt;li&gt;Did &lt;a href="https://github.com/rschiefer/MSDeployAllTheThings/pull/6"&gt;some VSTS extension&lt;/a&gt; stuff&lt;/li&gt;
&lt;li&gt;Did &lt;a href="https://kamranicus.com/posts/2017-02-04-powershell-dsc-git-lfs-binaries"&gt;some&lt;/a&gt; Git LFS &lt;a href="https://kamranicus.com/posts/2017-06-14-downloading-git-lfs-files-from-tfs-vsts"&gt;stuff&lt;/a&gt; with Powershell and DSC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="speaking-and-conferences"&gt;Speaking and Conferences&lt;/h2&gt;
&lt;p&gt;I already reached one of my goals for 2018 &amp;quot;on accident,&amp;quot; which was doing a workshop.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In December, I revealed I'll be &lt;a href="https://kamranicus.com/posts/2017-12-18-workshop-bots-javascript-node-minnewebcon"&gt;doing a half-day workshop&lt;/a&gt; at MinneWebCon 2018 on Azure bots&lt;/li&gt;
&lt;li&gt;I &lt;a href="https://kamranicus.com/posts/2017-07-14-midwestjs-react-typescript"&gt;spoke at Midwest.js 2017&lt;/a&gt; on React and TypeScript&lt;/li&gt;
&lt;li&gt;I attended &lt;a href="https://kamranicus.com/posts/2017-02-01-build-2017"&gt;MS Build 2017&lt;/a&gt; which was a lot of fun&lt;/li&gt;
&lt;li&gt;I gave the same talk from Midwest.js at Target's internal &amp;quot;InnerConf&amp;quot; conference&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="games"&gt;Games&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/excaliburjs/ludum-38"&gt;Made a game&lt;/a&gt; for Ludum Dare 38&lt;/li&gt;
&lt;li&gt;&lt;a href="https://keeptrackofmygames.com/users/kamranicus/lists/played/?sortBy=DateAdded"&gt;Finished&lt;/a&gt; Horizon: Zero Dawn, Dishonored 2, Life is Strange, and Super Mario: Odyssey. Haven't beaten Zelda yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="goals"&gt;2018 Goals&lt;/h1&gt;
&lt;p&gt;In 2016 I didn't lay out my goals in a post, I had them in my head. I'd like to write them down here so I can compare how I did at the year end. Let's do it!&lt;/p&gt;
&lt;h2 id="primary-goals"&gt;Primary Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Publish 1 more Pluralsight course&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Host a half-day workshop (scheduled for April)&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Participate in a LD game jam&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-ludum-dare-41-post-mortem"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Attend and present at 2 conferences&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon"&gt;DONE&lt;/a&gt; and &lt;a href="https://kamranicus.com/posts/2018-05-11-ndc-minnesota-typescript-react"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Attend and present at a local user group&lt;/del&gt; (&lt;a href="https://twitter.com/kamranayub/status/1037840790414864384"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Finish KTOMG UI revamp with React&lt;/del&gt; (&lt;a href="https://twitter.com/kamranayub/status/1055344465991344128"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Continue doing code livestreams&lt;/li&gt;
&lt;li&gt;Publish another Pi guide for a project I have in mind&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="stretch-goals"&gt;Stretch Goals&lt;/h2&gt;
&lt;p&gt;My primary goals are based on previous milestones that I think I can continue. I also want to have some stretch goals to work towards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Become a Microsoft MVP:&lt;/strong&gt; I spread the love around TypeScript and Azure a lot in my talks and work, I'd like to work towards becoming an MVP.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nominated, but nope.&lt;/strong&gt; Unfortunately, somehow my MVP nomination fell through the cracks and I didn't hear back until September this year. They advised me to re-submit. 😞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publish 2 more Pluralsight courses:&lt;/strong&gt; I'm confident I can do at least 1 course in 2018, I'd love to do two!
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;Yes! Almost.&lt;/a&gt; I ended up doing two courses at once this year.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host a full-day workshop&lt;/strong&gt;: This one will be a tough one but with a half-day workshop goal already in progress, I should try for a full-day--even if it's at work and not publicly. Target hosts internal workshops and I've already signaled my intent to do one for 2018.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nope.&lt;/strong&gt; Work's been busy with a new release so while I want to start this soon, it won't be in 2018.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream 10 sessions&lt;/strong&gt;: I streamed 3 sessions in 2017 and took a holiday break. In January I want to start back up and continue it for the rest of the year, if I can make it work.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nope.&lt;/strong&gt; Ended up not having the time/energy to do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phew, that's a lot! We're going to see if I can achieve some of these in 2018 and what ends up carrying over to 2019. Good luck working towards your own goals for this new year!&lt;/p&gt;
&lt;h2 id="updates"&gt;Updates&lt;/h2&gt;
&lt;p&gt;Throughout the year I've come back and updated this post and am pretty happy about my progress! 🎉 I'll do another year in review in December to share more reflections.&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>